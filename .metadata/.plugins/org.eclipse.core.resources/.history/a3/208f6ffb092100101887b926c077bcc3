#include <stdio.h>
#include <stdbool.h>
#include "platform.h"
#include "xil_printf.h"
#include "arm_math.h"
#include "arm_const_structs.h"
#include "audio.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "math.h"
#include "xuartps.h"
#include "xgpio.h"
#include "mixer.h"

#define SAMPLE_RATE 48000
#define UINT32_MAX_AS_FLOAT 4294967295.0f
#define UINT_SCALED_MAX_VALUE 0xFFFFF
#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR		XPAR_SCUTIMER_INTR

mixer mixer;


static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId);
static void Timer_ISR(void *CallBackRef);
void delay(float sec);

int main()
{
	init_platform();

	XGpio GpioButtons;
	XGpio_Initialize(&GpioButtons, XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio_SetDataDirection(&GpioButtons, 1, 0xF);

	XUartPs Uart_Ps;
	XUartPs_Config *Config = XUartPs_LookupConfig(XPAR_XUARTPS_0_DEVICE_ID);
	XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
	XUartPs_SetBaudRate(&Uart_Ps, 115200);
	xil_printf("Ready for input\r\n");

	IicConfig(XPAR_XIICPS_0_DEVICE_ID);
	AudioPllConfig();
	AudioConfigureJacks();
	LineinLineoutConfig();

	XScuTimer Scu_Timer;
	XScuTimer_Config *Scu_ConfigPtr;
	XScuGic IntcInstance;

	Scu_ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
	Timer_Intr_Setup(&IntcInstance, &Scu_Timer, XPS_SCU_TMR_INT_ID);
	XScuTimer_LoadTimer(&Scu_Timer,(XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2)/(SAMPLE_RATE));
	XScuTimer_EnableAutoReload(&Scu_Timer);
	XScuTimer_Start(&Scu_Timer);


	/*sound s;
	s.frequency = Notes::C4;
	s.amplitude = 1.0f;
	s.waveFunc = Wave::sine;
	s.attack = 0.0f;
	s.decay = 0.0f;
	s.sustain = 1.0f;
	s.release = 0.0f;
*/
	mixer.play();

	u32 prevButtons = 0;

	float freqs[] = {
	    Notes::C4,  // C
	    Notes::E4,  // E
	    Notes::G4,  // G
	    Notes::B4   // B
	};

	for (;;) {
	    u32 buttons = XGpio_DiscreteRead(&GpioButtons, 1); // or GpioButtons if separated

	    for (int i = 0; i < 4; ++i) {
	        if ((buttons & (1 << i)) && !(prevButtons & (1 << i))) {
	            sound s;
	            s.frequency = freqs[i];
	            s.amplitude = 1.0f;
	            s.waveFunc = Wave::sine;
	            s.attack = 0.01f;
	            s.decay = 0.1f;
	            s.sustain = 0.8f;
	            s.release = 0.3f;

	            s.play();
	            mixer.addSound(s);
	        }
	    }

	    prevButtons = buttons;
	    usleep(10000); // debounce delay
	}

	return 0;
}


void delay(float sec)
{
	usleep(sec * 1000000);
}

static void Timer_ISR(void *CallBackRef)
{
    float sample = mixer.tick(1.0f / SAMPLE_RATE);
    //xil_printf("sample\r\n");
    sample = fmaxf(fminf(sample, 1.0f), -1.0f);
    uint32_t scaled = (uint32_t)(((sample + 1.0f) * 0.5f) * UINT_SCALED_MAX_VALUE);
    Xil_Out32(I2S_DATA_TX_L_REG, scaled);
    Xil_Out32(I2S_DATA_TX_R_REG, scaled);

}

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId)
{
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler,IntcInstancePtr);
	XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
	XScuGic_Enable(IntcInstancePtr, TimerIntrId);
	XScuTimer_EnableInterrupt(TimerInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}

