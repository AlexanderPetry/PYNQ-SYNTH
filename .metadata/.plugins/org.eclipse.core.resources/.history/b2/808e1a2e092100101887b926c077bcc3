#include "sound.h"
#include "utils.h"
#include "xil_printf.h"

sound::sound() : frequency(Notes::C4), amplitude(1.0f), phase(0.0f), duration(1.0f),
                 waveFunc(Wave::sine), attack(0.01f), decay(0.1f), sustain(0.8f), release(0.2f),
                 time(0.0f), released(false), done(false) {}

float sound::tick(float dt) {
    if (done) return 0.0f;
    if (!waveFunc) xil_printf("waveFunc is null!\r\n");

    time += dt;
    float env = 1.0f;

    if (!released) {
        if (time < attack)
            env = time / attack;
        else if (time < attack + decay)
            env = 1.0f - (1.0f - sustain) * ((time - attack) / decay);
        else
            env = sustain;
    } else {
        float releaseTime = time - releaseStart;
        if (releaseTime < release)
            env = sustain * (1.0f - releaseTime / release);
        else {
            done = true;
            return 0.0f;
        }
    }

    phase += 2.0f * M_PI * frequency * dt;
    if (phase > 2.0f * M_PI) phase -= 2.0f * M_PI;

    float out = env * waveFunc(phase, frequency, amplitude);
    static int printCounter = 0;
    if (++printCounter >= 4800) { // ~10 prints/sec
    	if (!waveFunc) xil_printf("waveFunc is null!\r\n");
    	else xil_printf("env=%d out=%d\n\r", (int)(env * 1000), (int)(out * 1000));
        printCounter = 0;

    }
    return out;
}

void sound::play() {
    time = 0.0f;
    phase = 0.0f;
    released = false;
    done = false;
}

void sound::stop() {
    released = true;
    releaseStart = time;
}

bool sound::isActive() {
    return !done;
}
