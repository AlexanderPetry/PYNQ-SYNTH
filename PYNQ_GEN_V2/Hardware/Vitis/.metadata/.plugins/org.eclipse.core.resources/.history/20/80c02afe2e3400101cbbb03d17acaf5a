
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "audio.h"
#include "sleep.h"
#include "xiicps.h"
#include "xparameters.h"
#include <math.h>

typedef short		Xint16;
typedef long		Xint32;

unsigned char IicConfig(unsigned int DeviceIdPS);
void AudioPllConfig();
void AudioWriteToReg(unsigned char u8RegAddr, unsigned char u8Data);
void AudioConfigureJacks();
void LineinLineoutConfig();
void audio_test();


int main()
{
	int status;
    init_platform();


	//Configure the IIC data structure
	IicConfig(XPAR_XIICPS_0_DEVICE_ID);

	//Configure the Audio Codec's PLL
	AudioPllConfig();

	//Configure the Line in and Line out ports.
	//Call LineInLineOutConfig() for a configuration that
	//enables the HP jack too.
	AudioConfigureJacks();
	LineinLineoutConfig();

    print("Audio Demo by www.cteq.eu\n\r");
    print("=========================\n\r");
    audio_test_sine();
    cleanup_platform();
    return 0;
}

void audio_test_sine(void)
{
	const int frequency = 50;
	const int amplitude =0x7FFFFF;
	const int sample_rate = 48000;
	const float step = 2.0 * M_PI * frequency / sample_rate;

	unsigned long u32DataL, u32DataR;
	float phase = 0.0;
	int sine_sample=0;
	while (1){
		for(int i=0; i< sample_rate/frequency; i++){
			sine_sample = (int)(amplitude * sin(phase));

			u32DataL = sine_sample;
			u32DataR = sine_sample;

			Xil_Out32(I2S_DATA_TX_L_REG, u32DataL);
			Xil_Out32(I2S_DATA_TX_R_REG, u32DataR);

			phase += step;
			if (phase > 2.0 * M_PI) phase -= 2.0 * M_PI;
		}
	}
}
