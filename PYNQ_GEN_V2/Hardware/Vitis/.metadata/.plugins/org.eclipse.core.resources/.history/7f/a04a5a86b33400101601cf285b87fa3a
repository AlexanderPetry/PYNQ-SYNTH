#include "platform.h"
#include "xscutimer.h"
#include "xscugic.h"
#include <vector>
#include "voice.hpp"
#include <stdio.h>
#include <stdbool.h>
#include "platform.h"

#include "xil_printf.h"
#include "xil_mmu.h"
#include "xil_cache.h"

#include "arm_math.h"
#include "arm_const_structs.h"
#include "xscutimer.h"
#include "xscugic.h"
#include "math.h"
#include "xuartps.h"
#include "xgpio.h"
#include "audio.h"
#include "utils.h"
#include <memory>

#include <map>
#include <algorithm>

#include "piano.hpp"


#define TIMER_DEVICE_ID      XPAR_XSCUTIMER_0_DEVICE_ID
#define TIMER_IRPT_INTR      XPAR_SCUTIMER_INTR
#define SAMPLE_RATE          48000
#define UINT_SCALED_MAX_VALUE 0x7FFFFF
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID

#define BASE_FREQUENCY 		1.0f

XScuTimer Timer;
XScuGic Intc;
std::vector<std::unique_ptr<voice>> voices;


piano piano;

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId);
static void Timer_ISR(void *CallBackRef);


int main()
{

    init_platform();
    Xil_SetTlbAttributes(0x40000000, 0x14de2);

	XUartPs Uart_Ps;
	XUartPs_Config *Config = XUartPs_LookupConfig(XPAR_XUARTPS_0_DEVICE_ID);
	XUartPs_CfgInitialize(&Uart_Ps, Config, Config->BaseAddress);
	XUartPs_SetBaudRate(&Uart_Ps, 115200);
	xil_printf("Ready for input\r\n");

	IicConfig(XPAR_XIICPS_0_DEVICE_ID);
	AudioPllConfig();
	AudioConfigureJacks();
	LineinLineoutConfig();

    // Init timer
	XScuTimer Scu_Timer;
	XScuTimer_Config *Scu_ConfigPtr;
	XScuGic IntcInstance;

	Scu_ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
	Timer_Intr_Setup(&IntcInstance, &Scu_Timer, XPS_SCU_TMR_INT_ID);
	XScuTimer_LoadTimer(&Scu_Timer, (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2)/(SAMPLE_RATE));
	XScuTimer_EnableAutoReload(&Scu_Timer);
	XScuTimer_Start(&Scu_Timer);

	std::map<int, voice*> activeVoices; // key: note, value: index in voices

	uint8_t midiMsg[3];
	int midiState = 0;

	while (1) {
		uint8_t byte;
		if (XUartPs_Recv(&Uart_Ps, &byte, 1) == 1) {
			if (byte & 0x80) { // Status byte
				if ((byte & 0xF0) == 0x90 || (byte & 0xF0) == 0x80) {
					midiMsg[0] = byte;
					midiState = 1;
				} else {
					midiState = 0; // Unsupported status
				}
			} else {
				if (midiState == 1) {
					midiMsg[1] = byte;
					midiState = 2;
				} else if (midiState == 2) {
					midiMsg[2] = byte;
					midiState = 0;

					uint8_t status = midiMsg[0] & 0xF0;
					uint8_t note = midiMsg[1];
					uint8_t velocity = midiMsg[2];

					xil_printf("status: %i, note: %i, vel: %i\r\n", status, note, velocity);

					if (status == 0x90 && velocity > 0) {
						voices.emplace_back(std::unique_ptr<voice>(piano.createVoice(note, velocity)));
						activeVoices[note] = voices.back().get();
					} else if (status == 0x80 || (status == 0x90 && velocity == 0)) {
						auto it = activeVoices.find(note);
						if (it != activeVoices.end()) {
						    it->second->stop();  // just trigger envelope
						    //activeVoices.erase(it);
						}
					}
				}
			}
		}
		usleep(1000);
	}


    cleanup_platform();
    return 0;
}




static void Timer_ISR(void *CallBackRef)
{

	float deltaTime = 1.0f / SAMPLE_RATE;
	static float globalPhase = 0.0f;
	globalPhase += 2.0f * M_PI * BASE_FREQUENCY / SAMPLE_RATE ;
	if (globalPhase >= 2.0f * M_PI) globalPhase -= 2.0f * M_PI;

	float sample = 0.0f;
	for (auto& ptr : voices) {
		voice& v = *ptr;
	    if (v.isActive()){
	    	v.updateEnvelope(deltaTime);
	        sample += v.nextSample(globalPhase, BASE_FREQUENCY);
	    }
	}

	voices.erase(
	    std::remove_if(voices.begin(), voices.end(),
	        [](const std::unique_ptr<voice>& v) { return !v->isActive(); }),
	    voices.end()
	);
	//int voiceCount = voices.size();

	//if (voiceCount > 0) sample /= voiceCount;

	sample = fmaxf(fminf(sample, +1.0f), -1.0f);
	uint32_t scaled = static_cast<uint32_t>(((sample))* UINT_SCALED_MAX_VALUE);
	Xil_Out32(I2S_DATA_TX_L_REG, scaled);
	Xil_Out32(I2S_DATA_TX_R_REG, scaled);

}



static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId)
{
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler,IntcInstancePtr);
	XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
	XScuGic_Enable(IntcInstancePtr, TimerIntrId);
	XScuTimer_EnableInterrupt(TimerInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}
