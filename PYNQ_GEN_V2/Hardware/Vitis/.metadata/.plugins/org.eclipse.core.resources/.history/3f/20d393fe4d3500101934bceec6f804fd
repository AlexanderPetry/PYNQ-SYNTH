#ifndef LOGIC_H
#define LOGIC_H

#include "arm_math.h"
#include "arm_const_structs.h"
#include "xil_types.h"
#include "peripheral.h"

#define EFFECT_AMOUNT 4
#define __CLEAR_SCREEN__ xil_printf("\x1B[2J\x1B[H\n");
#define DELAY_MS 20
#define DELAY_BUF_SIZE ((DELAY_MS * SAMPLE_RATE) / 1000)

typedef float float32_t;
typedef float32_t(*Eff_CB)(float32_t sample, void* params);

struct gain_Vstr{
	float gain{0};
};

struct delay_Vstr{
	float buffer{0};
};

float32_t gain_effect(float32_t sample, void* params);

struct SoundEffect{
 char EffName[20]={""};
 u8 Effstate{0};
 Eff_CB effFunction;
 void *intVstr; //internal value struct -> EffIValues //params
 SoundEffect(const char* name, Eff_CB cb, void* V_struct);
};

class Effects{
public:
	void traverseList();
	unsigned long perform(unsigned long audioIn);
	static Effects& instance(){ static Effects eff; return eff; }
private:
	Effects(){};
	void selectEvent();
	gain_Vstr internal_gain_Vstr;
	delay_Vstr internal_delay_Vstr;

	SoundEffect effect_list[EFFECT_AMOUNT]{	{"gain effect", gain_effect, (void*)&internal_gain_Vstr},
											{"delay effect", , (void*)&internal_delay_Vstr},
											{"dummy effect1", gain_effect, (void*)&internal_gain_Vstr},
											{"dummy effect2", gain_effect, (void*)&internal_gain_Vstr}};
};

namespace audio{

#define float float32_t
#define UINT32_MAX_AS_FLOAT 4294967295.0f //(2^32 - 1
#define UINT_SCALED_MAX_VALUE 0xFFFFF // 2^24 =>24 bits audio codec maximum value is 0xFF FFFF

#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR		XPAR_SCUTIMER_INTR
#define SAMPLE_RATE 		48000

class Audio_Driver{
public:
	static Audio_Driver& instance(){ static Audio_Driver AD; return AD; }
private:
	Audio_Driver();

	static void Timer_ISR(void * CallBackRef);
	static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId);

	XScuTimer Scu_Timer;
	XScuGic IntcInstance;
	static unsigned long u32DataL;
	static unsigned long u32DataR;
};

}

#endif
