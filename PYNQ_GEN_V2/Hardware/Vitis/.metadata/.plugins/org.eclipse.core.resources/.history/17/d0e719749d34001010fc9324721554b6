#include "platform.h"
#include "peripheral.h"
#include "audio.h"
#include "xscugic.h"
#include "xscutimer.h"

#define TIMER_DEVICE_ID      XPAR_XSCUTIMER_0_DEVICE_ID
#define TIMER_IRPT_INTR      XPAR_SCUTIMER_INTR
#define SAMPLE_RATE          48000
#define UINT_SCALED_MAX_VALUE 0xFFFFFF
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId);
static void Timer_ISR(void *CallBackRef);

int main() {
	init_platform();
	init_sine_table();

	IicConfig(XPAR_XIICPS_0_DEVICE_ID);
		AudioPllConfig();
		AudioConfigureJacks();
		LineinLineoutConfig();

		// Init timer
		XScuTimer Scu_Timer;
		XScuTimer_Config *Scu_ConfigPtr;
		XScuGic IntcInstance;

		Scu_ConfigPtr = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
		XScuTimer_CfgInitialize(&Scu_Timer, Scu_ConfigPtr, Scu_ConfigPtr->BaseAddr);
		Timer_Intr_Setup(&IntcInstance, &Scu_Timer, XPS_SCU_TMR_INT_ID);
		XScuTimer_LoadTimer(&Scu_Timer, (XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ / 2)/(SAMPLE_RATE));
		XScuTimer_EnableAutoReload(&Scu_Timer);
		XScuTimer_Start(&Scu_Timer);

	init_audio();
	UART uart{ UART::instance() };
	Rotary_enc Rot_enc{ Rotary_enc::instance() };

    while (1) {
    }
    return 0;
}

static void Timer_ISR(void * CallBackRef) {
    phase_accumulator += PHASE_INCREMENT;
    uint32_t index = (phase_accumulator >> 24) & (TABLE_SIZE - 1); // assuming 32-bit phase, top 8 bits for index

    int32_t sample = sine_table[index];

    Xil_Out32(I2S_DATA_TX_L_REG, sample);
    Xil_Out32(I2S_DATA_TX_R_REG, sample);
}

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId)
{
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler,IntcInstancePtr);
	XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
	XScuGic_Enable(IntcInstancePtr, TimerIntrId);
	XScuTimer_EnableInterrupt(TimerInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}
