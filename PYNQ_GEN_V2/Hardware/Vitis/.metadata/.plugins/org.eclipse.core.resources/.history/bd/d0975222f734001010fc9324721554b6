#include "platform.h"
#include "logic.h"
using namespace audio;

int main() {
	init_platform();

	UART uart{ UART::instance() };
	Audio_Driver audio{ Audio_Driver::instance()};
	Effects eff_instance{ Effects::instance() };

	eff_instance.traverseList();

    cleanup_platform();
    return 0;
}

namespace audio{

#define float float32_t
#define UINT32_MAX_AS_FLOAT 4294967295.0f //(2^32 - 1
#define UINT_SCALED_MAX_VALUE 0xFFFFF // 2^24 =>24 bits audio codec maximum value is 0xFF FFFF

#define TIMER_DEVICE_ID		XPAR_XSCUTIMER_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define TIMER_IRPT_INTR		XPAR_SCUTIMER_INTR
#define SAMPLE_RATE 		48000

class Audio_Driver{
public:
	static Audio_Driver& instance(){ static Audio_Driver AD; return AD; }
private:
	Audio_Driver();

	static void Timer_ISR(void * CallBackRef);
	static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId);

	XScuTimer Scu_Timer;
	XScuGic IntcInstance;
	static unsigned long u32DataL;
	static unsigned long u32DataR;
};

}
