#include "platform.h"
#include "peripheral.h"
#include "audio.h"
#include "xscugic.h"
#include "xscutimer.h"

#define TIMER_DEVICE_ID      XPAR_XSCUTIMER_0_DEVICE_ID
#define TIMER_IRPT_INTR      XPAR_SCUTIMER_INTR
#define SAMPLE_RATE          48000
#define UINT_SCALED_MAX_VALUE 0xFFFFFF
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId);
static void Timer_ISR(void *CallBackRef);

int main() {
	init_platform();

	UART uart{ UART::instance() };
	Rotary_enc Rot_enc{ Rotary_enc::instance() };

    while (1) {
    }
    return 0;
}

static void Timer_ISR(void * CallBackRef) {
    phase_accumulator += PHASE_INCREMENT;
    uint32_t index = (phase_accumulator >> 24) & (TABLE_SIZE - 1); // assuming 32-bit phase, top 8 bits for index

    int32_t sample = sine_table[index];

    Xil_Out32(I2S_DATA_TX_L_REG, sample);
    Xil_Out32(I2S_DATA_TX_R_REG, sample);
}

