#include "logic.h"

void
Effects::traverseList(){
	constexpr u8 total_btns = 4;

	Rotary_enc Rot_enc{ Rotary_enc::instance() };
	Switch_arr SW_ARR{ Switch_arr::instance() };
	Button_Array BTN_ARR{ Button_Array::instance() };

	u8 btn_mask{0};//[btn1][btn2][btn3][btn4]
	u8 sw1{0};
	u16 idx{0};
	u8 displayed_message{0};
	while (1){
		sw1 = SW_ARR.SWx_State(2);
		if(sw1 != Switch_arr::RE_STATE::ON_Stable) continue;

		if (!displayed_message){
			__CLEAR_SCREEN__ xil_printf("currently hovered over effect [-- %s --]\r\n",effect_list[idx].EffName);
			displayed_message =1;
		}

		btn_mask = 0;
		//check for ON_Changed event on buttons
		for (u8 i = 1; i <= total_btns; ++i) {
		    btn_mask <<= 1;
		    if (BTN_ARR.BTNx_State(i) == Button_Array::RE_STATE::ON_Changed){
		        btn_mask |= 0x1;
		    }
		}

		//one of the buttons generated an event
		if (btn_mask & 0xF) {
			switch(btn_mask){
				case 1://[btn4
						idx = (idx + EFFECT_AMOUNT - 1) % EFFECT_AMOUNT; //circular rotation for effect list]
						__CLEAR_SCREEN__ xil_printf("decrementing effect list\r\n");
						xil_printf("currently hovered over effect [-- %s --]\r\n",effect_list[idx].EffName);
					break;
				case 2://[btn3]
					 	 xil_printf("nothing set for this keybind\r\n");
					break;
				case 4://[btn2]
						usleep(100000);
					 	 xil_printf("selecting effect from list\r\n");
					 	 effect_list[idx].effFunction(0.f, effect_list[idx].intVstr);
					 	 displayed_message =0;
					break;
				case 8://[btn1]
						idx = (idx + 1) % EFFECT_AMOUNT; //circular rotation for effect list
						__CLEAR_SCREEN__ xil_printf("incrementing effect list\r\n");
					 	 xil_printf("currently hovered over effect [-- %s --]\r\n",effect_list[idx].EffName);
					break;

				default:
					break;
			}

		}
		usleep(10000);
	}
}

SoundEffect::SoundEffect(const char* name_, Eff_CB cb, void* V_struct) : effFunction(cb), intVstr(V_struct) {
    strncpy(EffName, name_, sizeof(EffName));
    EffName[sizeof(EffName) - 1] = '\0';
}

float raw_to_float(unsigned long sample) {
    int32_t s = (int32_t)(sample << 8) >> 8;  // sign-extend 24-bit to 32-bit
    return (float)s / 8388608.0f;  // 2^23 = 8388608, max positive value for signed 24-bit
}

unsigned long float_to_raw(float sample) {
    if (sample > 1.f) sample = 1.f;
    else if (sample < -1.f) sample = -1.f;

    int32_t s = (int32_t)(sample * 8388607.f); // max positive 24-bit value
    return (unsigned long)(s & 0xFFFFFF);
}

unsigned long
Effects::perform(unsigned long audioIn){
	float sample = raw_to_float(audioIn);
	gain_Vstr* gainVstructPtr = (gain_Vstr*)effect_list[0].intVstr;
	sample = sample * 1;//gainVstructPtr->gain;
	return float_to_raw(sample);
}

float32_t gain_effect(float32_t sample, void* params) {
	constexpr u8 total_btns = 4;
	Rotary_enc Rot_enc{ Rotary_enc::instance() };
	Button_Array BTN_ARR{ Button_Array::instance() };

	u8 btn_mask{0};

	//make copy of original if the user does not like the sound produced.
	gain_Vstr* paramptr{ (gain_Vstr*)params };
	gain_Vstr GVstr_CPY = *paramptr;

	s32 last_counter = Rot_enc.GetCounter();

	while(1){
		Rot_enc.GetSate();
		s32 current_counter = Rot_enc.GetCounter();
		s32 delta = current_counter - last_counter;
	    last_counter = current_counter;

	    if (delta != 0) {
	    	paramptr->gain += 0.05f * delta;
	    	if (paramptr->gain < 0) paramptr->gain = 0;
	    	if (paramptr->gain > 2) paramptr->gain = 2;

	    	//int int_part = (int)paramptr->gain;
	    	//int frac_part = (int)((paramptr->gain - int_part) * 100);

	    	__CLEAR_SCREEN__ xil_printf("gain = %f\r\n", paramptr->gain);
	    }

		btn_mask = 0;
		//check for ON_Changed event on buttons
		for (u8 i = 1; i <= total_btns; ++i) {
			btn_mask <<= 1;
			if (BTN_ARR.BTNx_State(i) == Button_Array::RE_STATE::ON_Changed){
				btn_mask |= 0x1;
			}
		}

		if (btn_mask & 0xF) {
			switch(btn_mask){
				case 1://[btn4
					break;
				case 2://[btn3]
						__CLEAR_SCREEN__ xil_printf("user discarted changes\r\n");
						*paramptr = GVstr_CPY;
						usleep(100000);
						return 0.f; //idk will see if return value should be applied or static global or something
					break;
				case 4://[btn2]
						__CLEAR_SCREEN__ xil_printf("gain confirmed = %f\r\n", paramptr->gain);
						usleep(100000);
						return 0.f;
					break;
				case 8://[btn1]
					break;
				default:
					break;
			}
		}
	usleep(10000);
	}
	//return sample * paramptr->gain;
}
