#include "platform.h"
#include "xil_printf.h"

int main()
{

    return 0;
}


static void Timer_ISR(void *CallBackRef)
{
	float sample = 0.0f;
	for (Voice& v : voices) {
	    if (v.isActive())
	        sample += v.nextSample();
	}
	sample = std::clamp(sample, -1.0f, 1.0f);
	uint32_t scaled = static_cast<uint32_t>(((sample + 1.0f) * 0.5f) * UINT_SCALED_MAX_VALUE);
	Xil_Out32(I2S_DATA_TX_L_REG, scaled);
	Xil_Out32(I2S_DATA_TX_R_REG, scaled);

}

static int Timer_Intr_Setup(XScuGic * IntcInstancePtr, XScuTimer *TimerInstancePtr, u16 TimerIntrId)
{
	XScuGic_Config *IntcConfig;
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig, IntcConfig->CpuBaseAddress);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler,IntcInstancePtr);
	XScuGic_Connect(IntcInstancePtr, TimerIntrId, (Xil_ExceptionHandler)Timer_ISR, (void *)TimerInstancePtr);
	XScuGic_Enable(IntcInstancePtr, TimerIntrId);
	XScuTimer_EnableInterrupt(TimerInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}
