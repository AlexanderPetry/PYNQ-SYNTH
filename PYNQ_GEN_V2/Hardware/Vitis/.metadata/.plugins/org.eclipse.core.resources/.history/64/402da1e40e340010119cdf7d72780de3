#ifndef PERIPHERAL_H
#define PERIPHERAL_H

#include "xuartps.h"
#include "xgpio.h"
#include "stdio.h"

#include "xgpio.h"
#include "xparameters.h"
#include "sleep.h"

#define INT_MAX 2147483647
#define INT_MIN -2147483648

#define I32increment(v, a) \
    do { \
        if ((a) > 0 && (v) > INT_MAX - (a)) \
            (v) = INT_MAX; \
        else if ((a) < 0 && (v) < INT_MIN - (a)) \
            (v) = INT_MIN; \
        else \
            (v) += (a); \
    } while (0)

#define I32decrement(v, a) I32increment((v), -(a))

class UART{
public:
	static UART& instance(static UART uart; return UART;)
private:
	UART();
	XUartPs Uart_Ps;
};

class Rotary_enc{
public:
	enum RE_STATE{
		LEFT,
		RIGHT,
		BUTTON,
		IDLE
	};

	RE_STATE GetSate();
	u32 GetCounter(){return counter;}
	u32 SetCounter(u32 v){counter = v;}

	Rotary_enc& instance();
private:
	Rotary_enc();
	~Rotary_enc();

	u32 Getvalue(){ return XGpio_DiscreteRead(&rotary, 1); }

	XGpio 	rotary;
	int 	counter{0};
	u8 		debounce{1};
	u32 	PS{0};
	u32 	CS{0};
};
#endif
