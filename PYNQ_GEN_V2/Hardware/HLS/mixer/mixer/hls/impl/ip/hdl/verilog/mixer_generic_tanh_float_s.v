// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mixer_generic_tanh_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        t_in,
        ap_return,
        grp_fu_106_p_din0,
        grp_fu_106_p_din1,
        grp_fu_106_p_opcode,
        grp_fu_106_p_dout0,
        grp_fu_106_p_ce,
        grp_fu_112_p_din0,
        grp_fu_112_p_din1,
        grp_fu_112_p_dout0,
        grp_fu_112_p_ce
);

parameter    ap_ST_fsm_state1 = 88'd1;
parameter    ap_ST_fsm_state2 = 88'd2;
parameter    ap_ST_fsm_state3 = 88'd4;
parameter    ap_ST_fsm_state4 = 88'd8;
parameter    ap_ST_fsm_state5 = 88'd16;
parameter    ap_ST_fsm_state6 = 88'd32;
parameter    ap_ST_fsm_state7 = 88'd64;
parameter    ap_ST_fsm_state8 = 88'd128;
parameter    ap_ST_fsm_state9 = 88'd256;
parameter    ap_ST_fsm_state10 = 88'd512;
parameter    ap_ST_fsm_state11 = 88'd1024;
parameter    ap_ST_fsm_state12 = 88'd2048;
parameter    ap_ST_fsm_state13 = 88'd4096;
parameter    ap_ST_fsm_state14 = 88'd8192;
parameter    ap_ST_fsm_state15 = 88'd16384;
parameter    ap_ST_fsm_state16 = 88'd32768;
parameter    ap_ST_fsm_state17 = 88'd65536;
parameter    ap_ST_fsm_state18 = 88'd131072;
parameter    ap_ST_fsm_state19 = 88'd262144;
parameter    ap_ST_fsm_state20 = 88'd524288;
parameter    ap_ST_fsm_state21 = 88'd1048576;
parameter    ap_ST_fsm_state22 = 88'd2097152;
parameter    ap_ST_fsm_state23 = 88'd4194304;
parameter    ap_ST_fsm_state24 = 88'd8388608;
parameter    ap_ST_fsm_state25 = 88'd16777216;
parameter    ap_ST_fsm_state26 = 88'd33554432;
parameter    ap_ST_fsm_state27 = 88'd67108864;
parameter    ap_ST_fsm_state28 = 88'd134217728;
parameter    ap_ST_fsm_state29 = 88'd268435456;
parameter    ap_ST_fsm_state30 = 88'd536870912;
parameter    ap_ST_fsm_state31 = 88'd1073741824;
parameter    ap_ST_fsm_state32 = 88'd2147483648;
parameter    ap_ST_fsm_state33 = 88'd4294967296;
parameter    ap_ST_fsm_state34 = 88'd8589934592;
parameter    ap_ST_fsm_state35 = 88'd17179869184;
parameter    ap_ST_fsm_state36 = 88'd34359738368;
parameter    ap_ST_fsm_state37 = 88'd68719476736;
parameter    ap_ST_fsm_state38 = 88'd137438953472;
parameter    ap_ST_fsm_state39 = 88'd274877906944;
parameter    ap_ST_fsm_state40 = 88'd549755813888;
parameter    ap_ST_fsm_state41 = 88'd1099511627776;
parameter    ap_ST_fsm_state42 = 88'd2199023255552;
parameter    ap_ST_fsm_state43 = 88'd4398046511104;
parameter    ap_ST_fsm_state44 = 88'd8796093022208;
parameter    ap_ST_fsm_state45 = 88'd17592186044416;
parameter    ap_ST_fsm_state46 = 88'd35184372088832;
parameter    ap_ST_fsm_state47 = 88'd70368744177664;
parameter    ap_ST_fsm_state48 = 88'd140737488355328;
parameter    ap_ST_fsm_state49 = 88'd281474976710656;
parameter    ap_ST_fsm_state50 = 88'd562949953421312;
parameter    ap_ST_fsm_state51 = 88'd1125899906842624;
parameter    ap_ST_fsm_state52 = 88'd2251799813685248;
parameter    ap_ST_fsm_state53 = 88'd4503599627370496;
parameter    ap_ST_fsm_state54 = 88'd9007199254740992;
parameter    ap_ST_fsm_state55 = 88'd18014398509481984;
parameter    ap_ST_fsm_state56 = 88'd36028797018963968;
parameter    ap_ST_fsm_state57 = 88'd72057594037927936;
parameter    ap_ST_fsm_state58 = 88'd144115188075855872;
parameter    ap_ST_fsm_state59 = 88'd288230376151711744;
parameter    ap_ST_fsm_state60 = 88'd576460752303423488;
parameter    ap_ST_fsm_state61 = 88'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 88'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 88'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 88'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 88'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 88'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 88'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 88'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 88'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 88'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 88'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 88'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 88'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 88'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 88'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 88'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 88'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 88'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 88'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 88'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 88'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 88'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 88'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 88'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 88'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 88'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 88'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 88'd154742504910672534362390528;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] t_in;
output  [31:0] ap_return;
output  [31:0] grp_fu_106_p_din0;
output  [31:0] grp_fu_106_p_din1;
output  [1:0] grp_fu_106_p_opcode;
input  [31:0] grp_fu_106_p_dout0;
output   grp_fu_106_p_ce;
output  [31:0] grp_fu_112_p_din0;
output  [31:0] grp_fu_112_p_din1;
input  [31:0] grp_fu_112_p_dout0;
output   grp_fu_112_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [87:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_136;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state50;
reg   [0:0] din_sign_reg_356;
wire   [7:0] din_exp_fu_154_p4;
reg   [7:0] din_exp_reg_361;
wire   [30:0] trunc_ln313_fu_168_p1;
reg   [30:0] trunc_ln313_reg_366;
wire   [31:0] abst_in_fu_180_p1;
reg   [31:0] abst_in_reg_371;
wire   [0:0] icmp_ln36_fu_186_p2;
reg   [0:0] icmp_ln36_reg_379;
wire   [0:0] icmp_ln45_fu_192_p2;
reg   [0:0] icmp_ln45_reg_383;
wire   [0:0] and_ln46_fu_210_p2;
reg   [0:0] and_ln46_reg_387;
wire   [0:0] icmp_ln38_fu_216_p2;
reg   [0:0] icmp_ln38_reg_391;
wire   [0:0] grp_fu_126_p2;
reg   [0:0] tmp_2_reg_396;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln54_fu_222_p2;
reg   [0:0] icmp_ln54_reg_400;
wire   [31:0] bitcast_ln55_fu_234_p1;
wire    ap_CS_fsm_state3;
wire   [31:0] x_3_fu_239_p3;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln9_fu_261_p2;
reg   [0:0] icmp_ln9_reg_416;
wire   [0:0] icmp_ln10_fu_267_p2;
reg   [0:0] icmp_ln10_reg_420;
wire   [63:0] grp_fu_122_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] grp_exp_generic_double_s_fu_89_ap_return;
reg   [63:0] tmp_4_reg_429;
wire    ap_CS_fsm_state17;
wire   [63:0] grp_fu_131_p2;
reg   [63:0] sub_i_reg_434;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_113_p2;
reg   [31:0] div_reg_439;
wire    ap_CS_fsm_state34;
wire   [31:0] bitcast_ln66_1_fu_344_p1;
wire    ap_CS_fsm_state39;
reg   [31:0] resultf_1_reg_449;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state52;
wire   [31:0] select_ln38_fu_349_p3;
wire    ap_CS_fsm_state88;
wire   [31:0] grp_fu_118_p1;
reg   [31:0] ap_phi_mux_expx_phi_fu_62_p6;
reg   [31:0] expx_reg_58;
wire    ap_CS_fsm_state23;
reg   [31:0] ap_phi_mux_resultf_3_phi_fu_76_p10;
reg   [31:0] resultf_3_reg_72;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state38;
reg   [31:0] grp_fu_100_p0;
reg   [31:0] grp_fu_100_p1;
wire    ap_CS_fsm_state35;
reg   [31:0] grp_fu_113_p0;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_126_p0;
wire    ap_CS_fsm_state18;
wire   [31:0] data_fu_142_p1;
wire   [31:0] t_fu_172_p3;
wire   [22:0] din_sig_fu_164_p1;
wire   [0:0] icmp_ln46_fu_198_p2;
wire   [0:0] icmp_ln46_1_fu_204_p2;
wire   [31:0] or_ln_fu_227_p3;
wire   [31:0] data_1_fu_247_p1;
wire   [7:0] xs_exp_1_fu_251_p4;
wire   [31:0] bitcast_ln83_fu_273_p1;
wire   [0:0] bit_sel1_fu_277_p3;
wire   [0:0] xor_ln83_fu_285_p2;
wire   [30:0] trunc_ln83_fu_291_p1;
wire   [31:0] xor_ln1_fu_295_p3;
wire   [31:0] bitcast_ln83_1_fu_303_p1;
wire   [31:0] bitcast_ln66_fu_314_p1;
wire   [0:0] bit_sel_fu_318_p3;
wire   [0:0] xor_ln66_fu_326_p2;
wire   [30:0] trunc_ln66_fu_332_p1;
wire   [31:0] xor_ln_fu_336_p3;
reg   [1:0] grp_fu_100_opcode;
wire   [31:0] select_ln79_fu_307_p3;
reg   [31:0] ap_return_preg;
reg   [87:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 88'd1;
#0 ap_return_preg = 32'd0;
end

mixer_exp_generic_double_s grp_exp_generic_double_s_fu_89(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .x(grp_fu_122_p1),
    .ap_return(grp_exp_generic_double_s_fu_89_ap_return)
);

mixer_fdiv_32ns_32ns_32_8_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_8_no_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_113_p0),
    .din1(reg_136),
    .ce(1'b1),
    .dout(grp_fu_113_p2)
);

mixer_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_i_reg_434),
    .ce(1'b1),
    .dout(grp_fu_118_p1)
);

mixer_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_3_fu_239_p3),
    .ce(1'b1),
    .dout(grp_fu_122_p1)
);

mixer_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_126_p0),
    .din1(32'd1102053376),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_126_p2)
);

mixer_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_4_full_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_429),
    .din1(64'd13830554455654793216),
    .ce(1'b1),
    .dout(grp_fu_131_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_return_preg <= select_ln79_fu_307_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln10_fu_267_p2 == 1'd1) & (icmp_ln9_fu_261_p2 == 1'd0))) begin
        expx_reg_58 <= x_3_fu_239_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln9_fu_261_p2 == 1'd1))) begin
        expx_reg_58 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln10_reg_420 == 1'd0) & (icmp_ln9_reg_416 == 1'd0))) begin
        expx_reg_58 <= grp_fu_118_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_126_p2 == 1'd0))) begin
        resultf_3_reg_72 <= 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        resultf_3_reg_72 <= select_ln38_fu_349_p3;
    end else if (((1'd0 == and_ln46_reg_387) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln54_reg_400 == 1'd0) & (tmp_2_reg_396 == 1'd1) & (icmp_ln45_reg_383 == 1'd0) & (icmp_ln36_reg_379 == 1'd0))) begin
        resultf_3_reg_72 <= grp_fu_106_p_dout0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        resultf_3_reg_72 <= resultf_1_reg_449;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        resultf_3_reg_72 <= grp_fu_112_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        abst_in_reg_371[30 : 0] <= abst_in_fu_180_p1[30 : 0];
        and_ln46_reg_387 <= and_ln46_fu_210_p2;
        din_exp_reg_361 <= {{data_fu_142_p1[30:23]}};
        din_sign_reg_356 <= data_fu_142_p1[32'd31];
        icmp_ln36_reg_379 <= icmp_ln36_fu_186_p2;
        icmp_ln38_reg_391 <= icmp_ln38_fu_216_p2;
        icmp_ln45_reg_383 <= icmp_ln45_fu_192_p2;
        trunc_ln313_reg_366 <= trunc_ln313_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        div_reg_439 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln10_reg_420 <= icmp_ln10_fu_267_p2;
        icmp_ln9_reg_416 <= icmp_ln9_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln54_reg_400 <= icmp_ln54_fu_222_p2;
        tmp_2_reg_396 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_136 <= grp_fu_106_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        resultf_1_reg_449 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        sub_i_reg_434 <= grp_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_4_reg_429 <= grp_exp_generic_double_s_fu_89_ap_return;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln10_reg_420 == 1'd0) & (icmp_ln9_reg_416 == 1'd0))) begin
        ap_phi_mux_expx_phi_fu_62_p6 = grp_fu_118_p1;
    end else begin
        ap_phi_mux_expx_phi_fu_62_p6 = expx_reg_58;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln46_reg_387) & (1'b1 == ap_CS_fsm_state38) & (icmp_ln54_reg_400 == 1'd0) & (tmp_2_reg_396 == 1'd1) & (icmp_ln45_reg_383 == 1'd0) & (icmp_ln36_reg_379 == 1'd0))) begin
        ap_phi_mux_resultf_3_phi_fu_76_p10 = grp_fu_106_p_dout0;
    end else begin
        ap_phi_mux_resultf_3_phi_fu_76_p10 = resultf_3_reg_72;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        ap_return = select_ln79_fu_307_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_reg_400 == 1'd1)))) begin
        grp_fu_100_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((icmp_ln45_fu_192_p2 == 1'd1) & (icmp_ln36_fu_186_p2 == 1'd0)) | ((1'd1 == and_ln46_fu_210_p2) & (icmp_ln36_fu_186_p2 == 1'd0)))) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_reg_400 == 1'd0)))) begin
        grp_fu_100_opcode = 2'd0;
    end else begin
        grp_fu_100_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_100_p0 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_100_p0 = ap_phi_mux_expx_phi_fu_62_p6;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_reg_400 == 1'd0))) begin
        grp_fu_100_p0 = abst_in_reg_371;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_reg_400 == 1'd1))) begin
        grp_fu_100_p0 = bitcast_ln55_fu_234_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_100_p0 = abst_in_fu_180_p1;
    end else begin
        grp_fu_100_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_100_p1 = div_reg_439;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_100_p1 = 32'd1073741824;
    end else if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_reg_400 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln54_reg_400 == 1'd0)))) begin
        grp_fu_100_p1 = abst_in_reg_371;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_100_p1 = 32'd1065353216;
    end else begin
        grp_fu_100_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_113_p0 = bitcast_ln66_1_fu_344_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_113_p0 = 32'd1073741824;
    end else begin
        grp_fu_113_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'd0 == and_ln46_fu_210_p2) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln45_fu_192_p2 == 1'd0) & (icmp_ln36_fu_186_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (((icmp_ln45_fu_192_p2 == 1'd1) & (icmp_ln36_fu_186_p2 == 1'd0)) | ((1'd1 == and_ln46_fu_210_p2) & (icmp_ln36_fu_186_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln36_fu_186_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_fu_126_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln10_fu_267_p2 == 1'd0) & (icmp_ln9_fu_261_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln54_reg_400 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abst_in_fu_180_p1 = t_fu_172_p3;

assign and_ln46_fu_210_p2 = (icmp_ln46_fu_198_p2 & icmp_ln46_1_fu_204_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign bit_sel1_fu_277_p3 = bitcast_ln83_fu_273_p1[32'd31];

assign bit_sel_fu_318_p3 = bitcast_ln66_fu_314_p1[32'd31];

assign bitcast_ln55_fu_234_p1 = or_ln_fu_227_p3;

assign bitcast_ln66_1_fu_344_p1 = xor_ln_fu_336_p3;

assign bitcast_ln66_fu_314_p1 = expx_reg_58;

assign bitcast_ln83_1_fu_303_p1 = xor_ln1_fu_295_p3;

assign bitcast_ln83_fu_273_p1 = ap_phi_mux_resultf_3_phi_fu_76_p10;

assign data_1_fu_247_p1 = x_3_fu_239_p3;

assign data_fu_142_p1 = t_in;

assign din_exp_fu_154_p4 = {{data_fu_142_p1[30:23]}};

assign din_sig_fu_164_p1 = data_fu_142_p1[22:0];

assign grp_fu_106_p_ce = 1'b1;

assign grp_fu_106_p_din0 = grp_fu_100_p0;

assign grp_fu_106_p_din1 = grp_fu_100_p1;

assign grp_fu_106_p_opcode = grp_fu_100_opcode;

assign grp_fu_112_p_ce = 1'b1;

assign grp_fu_112_p_din0 = abst_in_reg_371;

assign grp_fu_112_p_din1 = reg_136;

assign grp_fu_126_p0 = t_fu_172_p3;

assign icmp_ln10_fu_267_p2 = ((xs_exp_1_fu_251_p4 < 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_186_p2 = ((din_exp_fu_154_p4 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_216_p2 = ((din_sig_fu_164_p1 != 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_192_p2 = ((din_exp_fu_154_p4 < 8'd72) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_204_p2 = ((din_sig_fu_164_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_198_p2 = ((din_exp_fu_154_p4 == 8'd72) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_222_p2 = ((din_exp_reg_361 < 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_261_p2 = ((xs_exp_1_fu_251_p4 == 8'd0) ? 1'b1 : 1'b0);

assign or_ln_fu_227_p3 = {{1'd1}, {trunc_ln313_reg_366}};

assign select_ln38_fu_349_p3 = ((icmp_ln38_reg_391[0:0] == 1'b1) ? 32'd2147483647 : 32'd1065353216);

assign select_ln79_fu_307_p3 = ((din_sign_reg_356[0:0] == 1'b1) ? bitcast_ln83_1_fu_303_p1 : ap_phi_mux_resultf_3_phi_fu_76_p10);

assign t_fu_172_p3 = {{1'd0}, {trunc_ln313_fu_168_p1}};

assign trunc_ln313_fu_168_p1 = data_fu_142_p1[30:0];

assign trunc_ln66_fu_332_p1 = bitcast_ln66_fu_314_p1[30:0];

assign trunc_ln83_fu_291_p1 = bitcast_ln83_fu_273_p1[30:0];

assign x_3_fu_239_p3 = ((icmp_ln54_reg_400[0:0] == 1'b1) ? grp_fu_106_p_dout0 : grp_fu_106_p_dout0);

assign xor_ln1_fu_295_p3 = {{xor_ln83_fu_285_p2}, {trunc_ln83_fu_291_p1}};

assign xor_ln66_fu_326_p2 = (bit_sel_fu_318_p3 ^ 1'd1);

assign xor_ln83_fu_285_p2 = (bit_sel1_fu_277_p3 ^ 1'd1);

assign xor_ln_fu_336_p3 = {{xor_ln66_fu_326_p2}, {trunc_ln66_fu_332_p1}};

assign xs_exp_1_fu_251_p4 = {{data_1_fu_247_p1[30:23]}};

always @ (posedge ap_clk) begin
    abst_in_reg_371[31] <= 1'b0;
end

endmodule //mixer_generic_tanh_float_s
