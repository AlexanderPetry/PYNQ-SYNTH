// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mixer_mixer,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=18.609840,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=3136,HLS_SYN_LUT=5910,HLS_VERSION=2024_1}" *)

module mixer (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] voice_in0;
wire   [31:0] voice_in1;
wire   [31:0] voice_in2;
wire   [31:0] voice_in3;
wire   [31:0] drive;
wire   [31:0] mix_out;
reg    mix_out_ap_vld;
wire   [31:0] grp_fu_106_p2;
reg   [31:0] reg_116;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
reg   [31:0] drive_read_reg_127;
reg   [31:0] voice_in3_read_reg_132;
reg   [31:0] voice_in2_read_reg_137;
wire   [31:0] grp_fu_112_p2;
reg   [31:0] x_assign_1_reg_152;
wire    ap_CS_fsm_state14;
wire    grp_generic_tanh_float_s_fu_95_ap_start;
wire    grp_generic_tanh_float_s_fu_95_ap_done;
wire    grp_generic_tanh_float_s_fu_95_ap_idle;
wire    grp_generic_tanh_float_s_fu_95_ap_ready;
wire   [31:0] grp_generic_tanh_float_s_fu_95_ap_return;
wire   [31:0] grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din0;
wire   [31:0] grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din1;
wire   [1:0] grp_generic_tanh_float_s_fu_95_grp_fu_106_p_opcode;
wire    grp_generic_tanh_float_s_fu_95_grp_fu_106_p_ce;
wire   [31:0] grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din0;
wire   [31:0] grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din1;
wire    grp_generic_tanh_float_s_fu_95_grp_fu_112_p_ce;
reg    grp_generic_tanh_float_s_fu_95_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [31:0] grp_fu_106_p0;
reg   [31:0] grp_fu_106_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
reg   [31:0] grp_fu_112_p0;
reg   [31:0] grp_fu_112_p1;
wire    ap_CS_fsm_state13;
reg   [1:0] grp_fu_106_opcode;
reg    grp_fu_106_ce;
reg    grp_fu_112_ce;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 grp_generic_tanh_float_s_fu_95_ap_start_reg = 1'b0;
end

mixer_generic_tanh_float_s grp_generic_tanh_float_s_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_generic_tanh_float_s_fu_95_ap_start),
    .ap_done(grp_generic_tanh_float_s_fu_95_ap_done),
    .ap_idle(grp_generic_tanh_float_s_fu_95_ap_idle),
    .ap_ready(grp_generic_tanh_float_s_fu_95_ap_ready),
    .t_in(x_assign_1_reg_152),
    .ap_return(grp_generic_tanh_float_s_fu_95_ap_return),
    .grp_fu_106_p_din0(grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din0),
    .grp_fu_106_p_din1(grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din1),
    .grp_fu_106_p_opcode(grp_generic_tanh_float_s_fu_95_grp_fu_106_p_opcode),
    .grp_fu_106_p_dout0(grp_fu_106_p2),
    .grp_fu_106_p_ce(grp_generic_tanh_float_s_fu_95_grp_fu_106_p_ce),
    .grp_fu_112_p_din0(grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din0),
    .grp_fu_112_p_din1(grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din1),
    .grp_fu_112_p_dout0(grp_fu_112_p2),
    .grp_fu_112_p_ce(grp_generic_tanh_float_s_fu_95_grp_fu_112_p_ce)
);

mixer_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .voice_in0(voice_in0),
    .voice_in1(voice_in1),
    .voice_in2(voice_in2),
    .voice_in3(voice_in3),
    .drive(drive),
    .mix_out(mix_out),
    .mix_out_ap_vld(mix_out_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mixer_faddfsub_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_4_full_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_106_p0),
    .din1(grp_fu_106_p1),
    .opcode(grp_fu_106_opcode),
    .ce(grp_fu_106_ce),
    .dout(grp_fu_106_p2)
);

mixer_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_112_p0),
    .din1(grp_fu_112_p1),
    .ce(grp_fu_112_ce),
    .dout(grp_fu_112_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_generic_tanh_float_s_fu_95_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_generic_tanh_float_s_fu_95_ap_start_reg <= 1'b1;
        end else if ((grp_generic_tanh_float_s_fu_95_ap_ready == 1'b1)) begin
            grp_generic_tanh_float_s_fu_95_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        drive_read_reg_127 <= drive;
        voice_in2_read_reg_137 <= voice_in2;
        voice_in3_read_reg_132 <= voice_in3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_116 <= grp_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        x_assign_1_reg_152 <= grp_fu_112_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((grp_generic_tanh_float_s_fu_95_ap_done == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((grp_generic_tanh_float_s_fu_95_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_generic_tanh_float_s_fu_95_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_106_ce = grp_generic_tanh_float_s_fu_95_grp_fu_106_p_ce;
    end else begin
        grp_fu_106_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_106_opcode = grp_generic_tanh_float_s_fu_95_grp_fu_106_p_opcode;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_106_opcode = 2'd0;
    end else begin
        grp_fu_106_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_106_p0 = grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_106_p0 = reg_116;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_106_p0 = voice_in0;
    end else begin
        grp_fu_106_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_106_p1 = grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_106_p1 = voice_in3_read_reg_132;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_106_p1 = voice_in2_read_reg_137;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_106_p1 = voice_in1;
    end else begin
        grp_fu_106_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_112_ce = grp_generic_tanh_float_s_fu_95_grp_fu_112_p_ce;
    end else begin
        grp_fu_112_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_112_p0 = grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_112_p0 = reg_116;
    end else begin
        grp_fu_112_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_112_p1 = grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_112_p1 = drive_read_reg_127;
    end else begin
        grp_fu_112_p1 = 'bx;
    end
end

always @ (*) begin
    if (((grp_generic_tanh_float_s_fu_95_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        mix_out_ap_vld = 1'b1;
    end else begin
        mix_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_generic_tanh_float_s_fu_95_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_generic_tanh_float_s_fu_95_ap_start = grp_generic_tanh_float_s_fu_95_ap_start_reg;

assign mix_out = grp_generic_tanh_float_s_fu_95_ap_return;

endmodule //mixer
