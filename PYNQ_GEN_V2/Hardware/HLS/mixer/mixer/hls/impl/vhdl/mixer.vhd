-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixer is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mixer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mixer_mixer,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=18.609840,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=3136,HLS_SYN_LUT=5910,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal voice_in0 : STD_LOGIC_VECTOR (31 downto 0);
    signal voice_in1 : STD_LOGIC_VECTOR (31 downto 0);
    signal voice_in2 : STD_LOGIC_VECTOR (31 downto 0);
    signal voice_in3 : STD_LOGIC_VECTOR (31 downto 0);
    signal drive : STD_LOGIC_VECTOR (31 downto 0);
    signal mix_out : STD_LOGIC_VECTOR (31 downto 0);
    signal mix_out_ap_vld : STD_LOGIC;
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal drive_read_reg_127 : STD_LOGIC_VECTOR (31 downto 0);
    signal voice_in3_read_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal voice_in2_read_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_generic_tanh_float_s_fu_95_ap_start : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_95_ap_done : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_95_ap_idle : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_95_ap_ready : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_95_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_tanh_float_s_fu_95_grp_fu_106_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_generic_tanh_float_s_fu_95_grp_fu_106_p_ce : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_tanh_float_s_fu_95_grp_fu_112_p_ce : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_95_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_106_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_112_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_106_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_106_ce : STD_LOGIC;
    signal grp_fu_112_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mixer_generic_tanh_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_106_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_106_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_106_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_106_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_106_p_ce : OUT STD_LOGIC;
        grp_fu_112_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_112_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_112_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_112_p_ce : OUT STD_LOGIC );
    end component;


    component mixer_faddfsub_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mixer_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mixer_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        voice_in0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        voice_in1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        voice_in2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        voice_in3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        drive : OUT STD_LOGIC_VECTOR (31 downto 0);
        mix_out : IN STD_LOGIC_VECTOR (31 downto 0);
        mix_out_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_generic_tanh_float_s_fu_95 : component mixer_generic_tanh_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_generic_tanh_float_s_fu_95_ap_start,
        ap_done => grp_generic_tanh_float_s_fu_95_ap_done,
        ap_idle => grp_generic_tanh_float_s_fu_95_ap_idle,
        ap_ready => grp_generic_tanh_float_s_fu_95_ap_ready,
        t_in => x_assign_1_reg_152,
        ap_return => grp_generic_tanh_float_s_fu_95_ap_return,
        grp_fu_106_p_din0 => grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din0,
        grp_fu_106_p_din1 => grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din1,
        grp_fu_106_p_opcode => grp_generic_tanh_float_s_fu_95_grp_fu_106_p_opcode,
        grp_fu_106_p_dout0 => grp_fu_106_p2,
        grp_fu_106_p_ce => grp_generic_tanh_float_s_fu_95_grp_fu_106_p_ce,
        grp_fu_112_p_din0 => grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din0,
        grp_fu_112_p_din1 => grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din1,
        grp_fu_112_p_dout0 => grp_fu_112_p2,
        grp_fu_112_p_ce => grp_generic_tanh_float_s_fu_95_grp_fu_112_p_ce);

    control_s_axi_U : component mixer_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        voice_in0 => voice_in0,
        voice_in1 => voice_in1,
        voice_in2 => voice_in2,
        voice_in3 => voice_in3,
        drive => drive,
        mix_out => mix_out,
        mix_out_ap_vld => mix_out_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    faddfsub_32ns_32ns_32_4_full_dsp_1_U30 : component mixer_faddfsub_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_106_p0,
        din1 => grp_fu_106_p1,
        opcode => grp_fu_106_opcode,
        ce => grp_fu_106_ce,
        dout => grp_fu_106_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U31 : component mixer_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_112_p0,
        din1 => grp_fu_112_p1,
        ce => grp_fu_112_ce,
        dout => grp_fu_112_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_generic_tanh_float_s_fu_95_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_generic_tanh_float_s_fu_95_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_generic_tanh_float_s_fu_95_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_tanh_float_s_fu_95_ap_ready = ap_const_logic_1)) then 
                    grp_generic_tanh_float_s_fu_95_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                drive_read_reg_127 <= drive;
                voice_in2_read_reg_137 <= voice_in2;
                voice_in3_read_reg_132 <= voice_in3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_116 <= grp_fu_106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                x_assign_1_reg_152 <= grp_fu_112_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_generic_tanh_float_s_fu_95_ap_done, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((grp_generic_tanh_float_s_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(grp_generic_tanh_float_s_fu_95_ap_done)
    begin
        if ((grp_generic_tanh_float_s_fu_95_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_generic_tanh_float_s_fu_95_ap_done, ap_CS_fsm_state16)
    begin
        if (((grp_generic_tanh_float_s_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_generic_tanh_float_s_fu_95_ap_done, ap_CS_fsm_state16)
    begin
        if (((grp_generic_tanh_float_s_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_106_ce_assign_proc : process(grp_generic_tanh_float_s_fu_95_grp_fu_106_p_ce, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_106_ce <= grp_generic_tanh_float_s_fu_95_grp_fu_106_p_ce;
        else 
            grp_fu_106_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_106_opcode_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_generic_tanh_float_s_fu_95_grp_fu_106_p_opcode, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_106_opcode <= grp_generic_tanh_float_s_fu_95_grp_fu_106_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_106_opcode <= ap_const_lv2_0;
        else 
            grp_fu_106_opcode <= "XX";
        end if; 
    end process;


    grp_fu_106_p0_assign_proc : process(ap_CS_fsm_state1, voice_in0, reg_116, grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din0, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_106_p0 <= grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_106_p0 <= reg_116;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_106_p0 <= voice_in0;
        else 
            grp_fu_106_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_106_p1_assign_proc : process(ap_CS_fsm_state1, voice_in1, voice_in3_read_reg_132, voice_in2_read_reg_137, grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din1, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_106_p1 <= grp_generic_tanh_float_s_fu_95_grp_fu_106_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_106_p1 <= voice_in3_read_reg_132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_106_p1 <= voice_in2_read_reg_137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_106_p1 <= voice_in1;
        else 
            grp_fu_106_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_112_ce_assign_proc : process(grp_generic_tanh_float_s_fu_95_grp_fu_112_p_ce, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_112_ce <= grp_generic_tanh_float_s_fu_95_grp_fu_112_p_ce;
        else 
            grp_fu_112_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_112_p0_assign_proc : process(reg_116, grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din0, ap_CS_fsm_state16, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_112_p0 <= grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_112_p0 <= reg_116;
        else 
            grp_fu_112_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_112_p1_assign_proc : process(drive_read_reg_127, grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din1, ap_CS_fsm_state16, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_112_p1 <= grp_generic_tanh_float_s_fu_95_grp_fu_112_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_112_p1 <= drive_read_reg_127;
        else 
            grp_fu_112_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_tanh_float_s_fu_95_ap_start <= grp_generic_tanh_float_s_fu_95_ap_start_reg;
    mix_out <= grp_generic_tanh_float_s_fu_95_ap_return;

    mix_out_ap_vld_assign_proc : process(grp_generic_tanh_float_s_fu_95_ap_done, ap_CS_fsm_state16)
    begin
        if (((grp_generic_tanh_float_s_fu_95_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            mix_out_ap_vld <= ap_const_logic_1;
        else 
            mix_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
