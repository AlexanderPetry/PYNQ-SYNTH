// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="echo_effect_echo_effect,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=18.000000,HLS_SYN_LAT=61,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2945,HLS_SYN_LUT=3889,HLS_VERSION=2024_1}" *)

module echo_effect (
        ap_clk,
        ap_rst_n,
        m_axi_BUFFER_r_AWVALID,
        m_axi_BUFFER_r_AWREADY,
        m_axi_BUFFER_r_AWADDR,
        m_axi_BUFFER_r_AWID,
        m_axi_BUFFER_r_AWLEN,
        m_axi_BUFFER_r_AWSIZE,
        m_axi_BUFFER_r_AWBURST,
        m_axi_BUFFER_r_AWLOCK,
        m_axi_BUFFER_r_AWCACHE,
        m_axi_BUFFER_r_AWPROT,
        m_axi_BUFFER_r_AWQOS,
        m_axi_BUFFER_r_AWREGION,
        m_axi_BUFFER_r_AWUSER,
        m_axi_BUFFER_r_WVALID,
        m_axi_BUFFER_r_WREADY,
        m_axi_BUFFER_r_WDATA,
        m_axi_BUFFER_r_WSTRB,
        m_axi_BUFFER_r_WLAST,
        m_axi_BUFFER_r_WID,
        m_axi_BUFFER_r_WUSER,
        m_axi_BUFFER_r_ARVALID,
        m_axi_BUFFER_r_ARREADY,
        m_axi_BUFFER_r_ARADDR,
        m_axi_BUFFER_r_ARID,
        m_axi_BUFFER_r_ARLEN,
        m_axi_BUFFER_r_ARSIZE,
        m_axi_BUFFER_r_ARBURST,
        m_axi_BUFFER_r_ARLOCK,
        m_axi_BUFFER_r_ARCACHE,
        m_axi_BUFFER_r_ARPROT,
        m_axi_BUFFER_r_ARQOS,
        m_axi_BUFFER_r_ARREGION,
        m_axi_BUFFER_r_ARUSER,
        m_axi_BUFFER_r_RVALID,
        m_axi_BUFFER_r_RREADY,
        m_axi_BUFFER_r_RDATA,
        m_axi_BUFFER_r_RLAST,
        m_axi_BUFFER_r_RID,
        m_axi_BUFFER_r_RUSER,
        m_axi_BUFFER_r_RRESP,
        m_axi_BUFFER_r_BVALID,
        m_axi_BUFFER_r_BREADY,
        m_axi_BUFFER_r_BRESP,
        m_axi_BUFFER_r_BID,
        m_axi_BUFFER_r_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 62'd1;
parameter    ap_ST_fsm_state2 = 62'd2;
parameter    ap_ST_fsm_state3 = 62'd4;
parameter    ap_ST_fsm_state4 = 62'd8;
parameter    ap_ST_fsm_state5 = 62'd16;
parameter    ap_ST_fsm_state6 = 62'd32;
parameter    ap_ST_fsm_state7 = 62'd64;
parameter    ap_ST_fsm_state8 = 62'd128;
parameter    ap_ST_fsm_state9 = 62'd256;
parameter    ap_ST_fsm_state10 = 62'd512;
parameter    ap_ST_fsm_state11 = 62'd1024;
parameter    ap_ST_fsm_state12 = 62'd2048;
parameter    ap_ST_fsm_state13 = 62'd4096;
parameter    ap_ST_fsm_state14 = 62'd8192;
parameter    ap_ST_fsm_state15 = 62'd16384;
parameter    ap_ST_fsm_state16 = 62'd32768;
parameter    ap_ST_fsm_state17 = 62'd65536;
parameter    ap_ST_fsm_state18 = 62'd131072;
parameter    ap_ST_fsm_state19 = 62'd262144;
parameter    ap_ST_fsm_state20 = 62'd524288;
parameter    ap_ST_fsm_state21 = 62'd1048576;
parameter    ap_ST_fsm_state22 = 62'd2097152;
parameter    ap_ST_fsm_state23 = 62'd4194304;
parameter    ap_ST_fsm_state24 = 62'd8388608;
parameter    ap_ST_fsm_state25 = 62'd16777216;
parameter    ap_ST_fsm_state26 = 62'd33554432;
parameter    ap_ST_fsm_state27 = 62'd67108864;
parameter    ap_ST_fsm_state28 = 62'd134217728;
parameter    ap_ST_fsm_state29 = 62'd268435456;
parameter    ap_ST_fsm_state30 = 62'd536870912;
parameter    ap_ST_fsm_state31 = 62'd1073741824;
parameter    ap_ST_fsm_state32 = 62'd2147483648;
parameter    ap_ST_fsm_state33 = 62'd4294967296;
parameter    ap_ST_fsm_state34 = 62'd8589934592;
parameter    ap_ST_fsm_state35 = 62'd17179869184;
parameter    ap_ST_fsm_state36 = 62'd34359738368;
parameter    ap_ST_fsm_state37 = 62'd68719476736;
parameter    ap_ST_fsm_state38 = 62'd137438953472;
parameter    ap_ST_fsm_state39 = 62'd274877906944;
parameter    ap_ST_fsm_state40 = 62'd549755813888;
parameter    ap_ST_fsm_state41 = 62'd1099511627776;
parameter    ap_ST_fsm_state42 = 62'd2199023255552;
parameter    ap_ST_fsm_state43 = 62'd4398046511104;
parameter    ap_ST_fsm_state44 = 62'd8796093022208;
parameter    ap_ST_fsm_state45 = 62'd17592186044416;
parameter    ap_ST_fsm_state46 = 62'd35184372088832;
parameter    ap_ST_fsm_state47 = 62'd70368744177664;
parameter    ap_ST_fsm_state48 = 62'd140737488355328;
parameter    ap_ST_fsm_state49 = 62'd281474976710656;
parameter    ap_ST_fsm_state50 = 62'd562949953421312;
parameter    ap_ST_fsm_state51 = 62'd1125899906842624;
parameter    ap_ST_fsm_state52 = 62'd2251799813685248;
parameter    ap_ST_fsm_state53 = 62'd4503599627370496;
parameter    ap_ST_fsm_state54 = 62'd9007199254740992;
parameter    ap_ST_fsm_state55 = 62'd18014398509481984;
parameter    ap_ST_fsm_state56 = 62'd36028797018963968;
parameter    ap_ST_fsm_state57 = 62'd72057594037927936;
parameter    ap_ST_fsm_state58 = 62'd144115188075855872;
parameter    ap_ST_fsm_state59 = 62'd288230376151711744;
parameter    ap_ST_fsm_state60 = 62'd576460752303423488;
parameter    ap_ST_fsm_state61 = 62'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 62'd2305843009213693952;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_M_AXI_BUFFER_R_ID_WIDTH = 1;
parameter    C_M_AXI_BUFFER_R_ADDR_WIDTH = 64;
parameter    C_M_AXI_BUFFER_R_DATA_WIDTH = 32;
parameter    C_M_AXI_BUFFER_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUFFER_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUFFER_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUFFER_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUFFER_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUFFER_R_USER_VALUE = 0;
parameter    C_M_AXI_BUFFER_R_PROT_VALUE = 0;
parameter    C_M_AXI_BUFFER_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUFFER_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_BUFFER_r_AWVALID;
input   m_axi_BUFFER_r_AWREADY;
output  [C_M_AXI_BUFFER_R_ADDR_WIDTH - 1:0] m_axi_BUFFER_r_AWADDR;
output  [C_M_AXI_BUFFER_R_ID_WIDTH - 1:0] m_axi_BUFFER_r_AWID;
output  [7:0] m_axi_BUFFER_r_AWLEN;
output  [2:0] m_axi_BUFFER_r_AWSIZE;
output  [1:0] m_axi_BUFFER_r_AWBURST;
output  [1:0] m_axi_BUFFER_r_AWLOCK;
output  [3:0] m_axi_BUFFER_r_AWCACHE;
output  [2:0] m_axi_BUFFER_r_AWPROT;
output  [3:0] m_axi_BUFFER_r_AWQOS;
output  [3:0] m_axi_BUFFER_r_AWREGION;
output  [C_M_AXI_BUFFER_R_AWUSER_WIDTH - 1:0] m_axi_BUFFER_r_AWUSER;
output   m_axi_BUFFER_r_WVALID;
input   m_axi_BUFFER_r_WREADY;
output  [C_M_AXI_BUFFER_R_DATA_WIDTH - 1:0] m_axi_BUFFER_r_WDATA;
output  [C_M_AXI_BUFFER_R_WSTRB_WIDTH - 1:0] m_axi_BUFFER_r_WSTRB;
output   m_axi_BUFFER_r_WLAST;
output  [C_M_AXI_BUFFER_R_ID_WIDTH - 1:0] m_axi_BUFFER_r_WID;
output  [C_M_AXI_BUFFER_R_WUSER_WIDTH - 1:0] m_axi_BUFFER_r_WUSER;
output   m_axi_BUFFER_r_ARVALID;
input   m_axi_BUFFER_r_ARREADY;
output  [C_M_AXI_BUFFER_R_ADDR_WIDTH - 1:0] m_axi_BUFFER_r_ARADDR;
output  [C_M_AXI_BUFFER_R_ID_WIDTH - 1:0] m_axi_BUFFER_r_ARID;
output  [7:0] m_axi_BUFFER_r_ARLEN;
output  [2:0] m_axi_BUFFER_r_ARSIZE;
output  [1:0] m_axi_BUFFER_r_ARBURST;
output  [1:0] m_axi_BUFFER_r_ARLOCK;
output  [3:0] m_axi_BUFFER_r_ARCACHE;
output  [2:0] m_axi_BUFFER_r_ARPROT;
output  [3:0] m_axi_BUFFER_r_ARQOS;
output  [3:0] m_axi_BUFFER_r_ARREGION;
output  [C_M_AXI_BUFFER_R_ARUSER_WIDTH - 1:0] m_axi_BUFFER_r_ARUSER;
input   m_axi_BUFFER_r_RVALID;
output   m_axi_BUFFER_r_RREADY;
input  [C_M_AXI_BUFFER_R_DATA_WIDTH - 1:0] m_axi_BUFFER_r_RDATA;
input   m_axi_BUFFER_r_RLAST;
input  [C_M_AXI_BUFFER_R_ID_WIDTH - 1:0] m_axi_BUFFER_r_RID;
input  [C_M_AXI_BUFFER_R_RUSER_WIDTH - 1:0] m_axi_BUFFER_r_RUSER;
input  [1:0] m_axi_BUFFER_r_RRESP;
input   m_axi_BUFFER_r_BVALID;
output   m_axi_BUFFER_r_BREADY;
input  [1:0] m_axi_BUFFER_r_BRESP;
input  [C_M_AXI_BUFFER_R_ID_WIDTH - 1:0] m_axi_BUFFER_r_BID;
input  [C_M_AXI_BUFFER_R_BUSER_WIDTH - 1:0] m_axi_BUFFER_r_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [61:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] sample_in;
reg    sample_out_ap_vld;
wire   [31:0] delay_ms;
wire   [31:0] feedback_gain;
wire   [31:0] sample_rate;
wire   [63:0] buffer_r_r;
wire   [31:0] index_i;
reg    index_o_ap_vld;
reg    BUFFER_r_blk_n_AR;
wire    ap_CS_fsm_state42;
reg    BUFFER_r_blk_n_R;
wire    ap_CS_fsm_state50;
reg    BUFFER_r_blk_n_AW;
reg    BUFFER_r_blk_n_W;
wire    ap_CS_fsm_state57;
reg    BUFFER_r_blk_n_B;
wire    ap_CS_fsm_state62;
wire   [31:0] grp_fu_218_p2;
reg   [31:0] reg_226;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state52;
reg   [63:0] buffer_r_read_reg_495;
reg   [31:0] sample_rate_read_reg_501;
reg   [31:0] feedback_gain_read_reg_506;
reg   [31:0] delay_ms_read_reg_511;
reg   [31:0] sample_in_read_reg_516;
reg   [31:0] local_index_reg_521;
wire   [31:0] grp_fu_223_p1;
reg   [31:0] conv_reg_528;
reg   [0:0] xs_sign_reg_533;
wire    ap_CS_fsm_state5;
wire   [22:0] trunc_ln342_fu_254_p1;
reg   [22:0] trunc_ln342_reg_538;
wire   [0:0] tmp_fu_268_p3;
reg   [0:0] tmp_reg_543;
wire   [8:0] select_ln18_fu_286_p3;
reg   [8:0] select_ln18_reg_548;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state22;
reg   [63:0] BUFFER_r_addr_reg_563;
wire    ap_CS_fsm_state41;
reg   [63:0] BUFFER_r_addr_1_reg_569;
reg   [31:0] BUFFER_r_addr_read_reg_575;
wire   [31:0] delayed_fu_486_p1;
wire    ap_CS_fsm_state51;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] out_reg_585;
wire    ap_CS_fsm_state56;
reg    BUFFER_r_AWVALID;
wire    BUFFER_r_AWREADY;
wire   [31:0] BUFFER_r_AWLEN;
reg    BUFFER_r_WVALID;
wire    BUFFER_r_WREADY;
reg    BUFFER_r_ARVALID;
wire    BUFFER_r_ARREADY;
wire   [31:0] BUFFER_r_ARLEN;
wire    BUFFER_r_RVALID;
reg    BUFFER_r_RREADY;
wire   [31:0] BUFFER_r_RDATA;
wire   [8:0] BUFFER_r_RFIFONUM;
wire    BUFFER_r_BVALID;
reg    BUFFER_r_BREADY;
wire  signed [63:0] sext_ln17_1_fu_440_p1;
wire  signed [63:0] sext_ln21_1_fu_476_p1;
reg    ap_block_state42_io;
wire   [31:0] bitcast_ln21_fu_490_p1;
wire   [31:0] grp_fu_402_p2;
wire    ap_CS_fsm_state53;
reg   [31:0] grp_fu_218_p0;
reg   [31:0] grp_fu_218_p1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire   [31:0] data_fu_232_p1;
wire   [7:0] xs_exp_fu_244_p4;
wire   [8:0] zext_ln317_fu_258_p1;
wire   [8:0] add_ln317_fu_262_p2;
wire   [7:0] sub_ln18_fu_276_p2;
wire  signed [8:0] sext_ln18_fu_282_p1;
wire   [24:0] mantissa_fu_294_p4;
wire  signed [31:0] sext_ln18_1_fu_307_p1;
wire   [78:0] zext_ln15_fu_303_p1;
wire   [78:0] zext_ln18_fu_310_p1;
wire   [78:0] lshr_ln18_fu_314_p2;
wire   [78:0] shl_ln18_fu_320_p2;
wire   [31:0] tmp_1_fu_326_p4;
wire   [31:0] tmp_2_fu_336_p4;
wire   [31:0] val_fu_346_p3;
wire   [31:0] result_2_fu_353_p2;
wire   [31:0] result_fu_359_p3;
wire   [0:0] icmp_ln14_fu_366_p2;
wire   [31:0] sub_ln16_fu_372_p2;
wire   [31:0] select_ln16_fu_378_p3;
wire   [31:0] grp_fu_391_p0;
wire   [16:0] grp_fu_391_p1;
wire   [31:0] grp_fu_402_p0;
wire   [16:0] grp_fu_402_p1;
wire   [16:0] grp_fu_391_p2;
wire   [16:0] trunc_ln17_fu_409_p1;
wire   [18:0] shl_ln_fu_413_p3;
wire  signed [63:0] sext_ln17_fu_421_p1;
wire   [63:0] add_ln17_fu_425_p2;
wire   [61:0] trunc_ln_fu_430_p4;
wire   [33:0] shl_ln1_fu_450_p3;
wire  signed [63:0] sext_ln21_fu_457_p1;
wire   [63:0] add_ln21_fu_461_p2;
wire   [61:0] trunc_ln1_fu_466_p4;
reg    grp_fu_391_ap_start;
wire    grp_fu_391_ap_done;
reg    grp_fu_402_ap_start;
wire    grp_fu_402_ap_done;
reg    grp_fu_402_ce;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
reg   [61:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
reg    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
reg    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
reg    ap_ST_fsm_state62_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 62'd1;
end

echo_effect_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .index_o(grp_fu_402_p2),
    .index_o_ap_vld(index_o_ap_vld),
    .index_i(index_i)
);

echo_effect_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .sample_in(sample_in),
    .sample_out(bitcast_ln21_fu_490_p1),
    .sample_out_ap_vld(sample_out_ap_vld),
    .delay_ms(delay_ms),
    .feedback_gain(feedback_gain),
    .sample_rate(sample_rate),
    .buffer_r_r(buffer_r_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

echo_effect_BUFFER_r_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUFFER_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUFFER_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUFFER_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUFFER_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUFFER_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUFFER_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUFFER_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUFFER_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BUFFER_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUFFER_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUFFER_R_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 32 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
BUFFER_r_m_axi_U(
    .AWVALID(m_axi_BUFFER_r_AWVALID),
    .AWREADY(m_axi_BUFFER_r_AWREADY),
    .AWADDR(m_axi_BUFFER_r_AWADDR),
    .AWID(m_axi_BUFFER_r_AWID),
    .AWLEN(m_axi_BUFFER_r_AWLEN),
    .AWSIZE(m_axi_BUFFER_r_AWSIZE),
    .AWBURST(m_axi_BUFFER_r_AWBURST),
    .AWLOCK(m_axi_BUFFER_r_AWLOCK),
    .AWCACHE(m_axi_BUFFER_r_AWCACHE),
    .AWPROT(m_axi_BUFFER_r_AWPROT),
    .AWQOS(m_axi_BUFFER_r_AWQOS),
    .AWREGION(m_axi_BUFFER_r_AWREGION),
    .AWUSER(m_axi_BUFFER_r_AWUSER),
    .WVALID(m_axi_BUFFER_r_WVALID),
    .WREADY(m_axi_BUFFER_r_WREADY),
    .WDATA(m_axi_BUFFER_r_WDATA),
    .WSTRB(m_axi_BUFFER_r_WSTRB),
    .WLAST(m_axi_BUFFER_r_WLAST),
    .WID(m_axi_BUFFER_r_WID),
    .WUSER(m_axi_BUFFER_r_WUSER),
    .ARVALID(m_axi_BUFFER_r_ARVALID),
    .ARREADY(m_axi_BUFFER_r_ARREADY),
    .ARADDR(m_axi_BUFFER_r_ARADDR),
    .ARID(m_axi_BUFFER_r_ARID),
    .ARLEN(m_axi_BUFFER_r_ARLEN),
    .ARSIZE(m_axi_BUFFER_r_ARSIZE),
    .ARBURST(m_axi_BUFFER_r_ARBURST),
    .ARLOCK(m_axi_BUFFER_r_ARLOCK),
    .ARCACHE(m_axi_BUFFER_r_ARCACHE),
    .ARPROT(m_axi_BUFFER_r_ARPROT),
    .ARQOS(m_axi_BUFFER_r_ARQOS),
    .ARREGION(m_axi_BUFFER_r_ARREGION),
    .ARUSER(m_axi_BUFFER_r_ARUSER),
    .RVALID(m_axi_BUFFER_r_RVALID),
    .RREADY(m_axi_BUFFER_r_RREADY),
    .RDATA(m_axi_BUFFER_r_RDATA),
    .RLAST(m_axi_BUFFER_r_RLAST),
    .RID(m_axi_BUFFER_r_RID),
    .RUSER(m_axi_BUFFER_r_RUSER),
    .RRESP(m_axi_BUFFER_r_RRESP),
    .BVALID(m_axi_BUFFER_r_BVALID),
    .BREADY(m_axi_BUFFER_r_BREADY),
    .BRESP(m_axi_BUFFER_r_BRESP),
    .BID(m_axi_BUFFER_r_BID),
    .BUSER(m_axi_BUFFER_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(BUFFER_r_ARVALID),
    .I_CH0_ARREADY(BUFFER_r_ARREADY),
    .I_CH0_ARADDR(BUFFER_r_addr_reg_563),
    .I_CH0_ARLEN(BUFFER_r_ARLEN),
    .I_CH0_RVALID(BUFFER_r_RVALID),
    .I_CH0_RREADY(BUFFER_r_RREADY),
    .I_CH0_RDATA(BUFFER_r_RDATA),
    .I_CH0_RFIFONUM(BUFFER_r_RFIFONUM),
    .I_CH0_AWVALID(BUFFER_r_AWVALID),
    .I_CH0_AWREADY(BUFFER_r_AWREADY),
    .I_CH0_AWADDR(BUFFER_r_addr_1_reg_569),
    .I_CH0_AWLEN(BUFFER_r_AWLEN),
    .I_CH0_WVALID(BUFFER_r_WVALID),
    .I_CH0_WREADY(BUFFER_r_WREADY),
    .I_CH0_WDATA(bitcast_ln21_fu_490_p1),
    .I_CH0_WSTRB(4'd15),
    .I_CH0_BVALID(BUFFER_r_BVALID),
    .I_CH0_BREADY(BUFFER_r_BREADY)
);

echo_effect_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_226),
    .din1(sample_in_read_reg_516),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

echo_effect_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_218_p0),
    .din1(grp_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_218_p2)
);

echo_effect_sitofp_32ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sitofp_32ns_32_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sample_rate_read_reg_501),
    .ce(1'b1),
    .dout(grp_fu_223_p1)
);

echo_effect_srem_32ns_17ns_17_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
srem_32ns_17ns_17_36_seq_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_391_ap_start),
    .done(grp_fu_391_ap_done),
    .din0(grp_fu_391_p0),
    .din1(grp_fu_391_p1),
    .ce(1'b1),
    .dout(grp_fu_391_p2)
);

echo_effect_srem_32ns_17ns_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
srem_32ns_17ns_32_36_seq_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_402_ap_start),
    .done(grp_fu_402_ap_done),
    .din0(grp_fu_402_p0),
    .din1(grp_fu_402_p1),
    .ce(grp_fu_402_ce),
    .dout(grp_fu_402_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        BUFFER_r_addr_1_reg_569 <= sext_ln21_1_fu_476_p1;
        BUFFER_r_addr_reg_563 <= sext_ln17_1_fu_440_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        BUFFER_r_addr_read_reg_575 <= BUFFER_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        buffer_r_read_reg_495 <= buffer_r_r;
        delay_ms_read_reg_511 <= delay_ms;
        feedback_gain_read_reg_506 <= feedback_gain;
        local_index_reg_521 <= index_i;
        sample_in_read_reg_516 <= sample_in;
        sample_rate_read_reg_501 <= sample_rate;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_reg_528 <= grp_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        out_reg_585 <= grp_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_226 <= grp_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln18_reg_548 <= select_ln18_fu_286_p3;
        tmp_reg_543 <= add_ln317_fu_262_p2[32'd8];
        trunc_ln342_reg_538 <= trunc_ln342_fu_254_p1;
        xs_sign_reg_533 <= data_fu_232_p1[32'd31];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42))) begin
        BUFFER_r_ARVALID = 1'b1;
    end else begin
        BUFFER_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42))) begin
        BUFFER_r_AWVALID = 1'b1;
    end else begin
        BUFFER_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUFFER_r_BVALID) & (1'b1 == ap_CS_fsm_state62))) begin
        BUFFER_r_BREADY = 1'b1;
    end else begin
        BUFFER_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUFFER_r_RVALID) & (1'b1 == ap_CS_fsm_state50))) begin
        BUFFER_r_RREADY = 1'b1;
    end else begin
        BUFFER_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUFFER_r_WREADY) & (1'b1 == ap_CS_fsm_state57))) begin
        BUFFER_r_WVALID = 1'b1;
    end else begin
        BUFFER_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        BUFFER_r_blk_n_AR = m_axi_BUFFER_r_ARREADY;
    end else begin
        BUFFER_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        BUFFER_r_blk_n_AW = m_axi_BUFFER_r_AWREADY;
    end else begin
        BUFFER_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        BUFFER_r_blk_n_B = m_axi_BUFFER_r_BVALID;
    end else begin
        BUFFER_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        BUFFER_r_blk_n_R = m_axi_BUFFER_r_RVALID;
    end else begin
        BUFFER_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        BUFFER_r_blk_n_W = m_axi_BUFFER_r_WREADY;
    end else begin
        BUFFER_r_blk_n_W = 1'b1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state42_io)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == BUFFER_r_RVALID)) begin
        ap_ST_fsm_state50_blk = 1'b1;
    end else begin
        ap_ST_fsm_state50_blk = 1'b0;
    end
end

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == BUFFER_r_WREADY)) begin
        ap_ST_fsm_state57_blk = 1'b1;
    end else begin
        ap_ST_fsm_state57_blk = 1'b0;
    end
end

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == BUFFER_r_BVALID)) begin
        ap_ST_fsm_state62_blk = 1'b1;
    end else begin
        ap_ST_fsm_state62_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == BUFFER_r_BVALID) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUFFER_r_BVALID) & (1'b1 == ap_CS_fsm_state62))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_218_p0 = delayed_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_218_p0 = reg_226;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_218_p0 = delay_ms_read_reg_511;
    end else begin
        grp_fu_218_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_218_p1 = feedback_gain_read_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_218_p1 = conv_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_218_p1 = 32'd981668463;
    end else begin
        grp_fu_218_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_391_ap_start = 1'b1;
    end else begin
        grp_fu_391_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_402_ap_start = 1'b1;
    end else begin
        grp_fu_402_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state62))) begin
        grp_fu_402_ce = 1'b0;
    end else begin
        grp_fu_402_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == BUFFER_r_WREADY) & (1'b1 == ap_CS_fsm_state57))) begin
        index_o_ap_vld = 1'b1;
    end else begin
        index_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == BUFFER_r_WREADY) & (1'b1 == ap_CS_fsm_state57))) begin
        sample_out_ap_vld = 1'b1;
    end else begin
        sample_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b0 == ap_block_state42_io) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == BUFFER_r_RVALID) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == BUFFER_r_WREADY) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == BUFFER_r_BVALID) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BUFFER_r_ARLEN = 64'd1;

assign BUFFER_r_AWLEN = 64'd1;

assign add_ln17_fu_425_p2 = ($signed(sext_ln17_fu_421_p1) + $signed(buffer_r_read_reg_495));

assign add_ln21_fu_461_p2 = ($signed(sext_ln21_fu_457_p1) + $signed(buffer_r_read_reg_495));

assign add_ln317_fu_262_p2 = ($signed(zext_ln317_fu_258_p1) + $signed(9'd385));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state42_io = ((1'b0 == BUFFER_r_ARREADY) | (1'b0 == BUFFER_r_AWREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln21_fu_490_p1 = out_reg_585;

assign data_fu_232_p1 = grp_fu_218_p2;

assign delayed_fu_486_p1 = BUFFER_r_addr_read_reg_575;

assign grp_fu_391_p0 = (select_ln16_fu_378_p3 + local_index_reg_521);

assign grp_fu_391_p1 = 32'd44100;

assign grp_fu_402_p0 = (local_index_reg_521 + 32'd1);

assign grp_fu_402_p1 = 32'd44100;

assign icmp_ln14_fu_366_p2 = (($signed(result_fu_359_p3) > $signed(32'd44099)) ? 1'b1 : 1'b0);

assign lshr_ln18_fu_314_p2 = zext_ln15_fu_303_p1 >> zext_ln18_fu_310_p1;

assign mantissa_fu_294_p4 = {{{{1'd1}, {trunc_ln342_reg_538}}}, {1'd0}};

assign result_2_fu_353_p2 = (32'd0 - val_fu_346_p3);

assign result_fu_359_p3 = ((xs_sign_reg_533[0:0] == 1'b1) ? result_2_fu_353_p2 : val_fu_346_p3);

assign select_ln16_fu_378_p3 = ((icmp_ln14_fu_366_p2[0:0] == 1'b1) ? 32'd1 : sub_ln16_fu_372_p2);

assign select_ln18_fu_286_p3 = ((tmp_fu_268_p3[0:0] == 1'b1) ? sext_ln18_fu_282_p1 : add_ln317_fu_262_p2);

assign sext_ln17_1_fu_440_p1 = $signed(trunc_ln_fu_430_p4);

assign sext_ln17_fu_421_p1 = $signed(shl_ln_fu_413_p3);

assign sext_ln18_1_fu_307_p1 = $signed(select_ln18_reg_548);

assign sext_ln18_fu_282_p1 = $signed(sub_ln18_fu_276_p2);

assign sext_ln21_1_fu_476_p1 = $signed(trunc_ln1_fu_466_p4);

assign sext_ln21_fu_457_p1 = $signed(shl_ln1_fu_450_p3);

assign shl_ln18_fu_320_p2 = zext_ln15_fu_303_p1 << zext_ln18_fu_310_p1;

assign shl_ln1_fu_450_p3 = {{local_index_reg_521}, {2'd0}};

assign shl_ln_fu_413_p3 = {{trunc_ln17_fu_409_p1}, {2'd0}};

assign sub_ln16_fu_372_p2 = (32'd44100 - result_fu_359_p3);

assign sub_ln18_fu_276_p2 = (8'd127 - xs_exp_fu_244_p4);

assign tmp_1_fu_326_p4 = {{lshr_ln18_fu_314_p2[55:24]}};

assign tmp_2_fu_336_p4 = {{shl_ln18_fu_320_p2[55:24]}};

assign tmp_fu_268_p3 = add_ln317_fu_262_p2[32'd8];

assign trunc_ln17_fu_409_p1 = grp_fu_391_p2[16:0];

assign trunc_ln1_fu_466_p4 = {{add_ln21_fu_461_p2[63:2]}};

assign trunc_ln342_fu_254_p1 = data_fu_232_p1[22:0];

assign trunc_ln_fu_430_p4 = {{add_ln17_fu_425_p2[63:2]}};

assign val_fu_346_p3 = ((tmp_reg_543[0:0] == 1'b1) ? tmp_1_fu_326_p4 : tmp_2_fu_336_p4);

assign xs_exp_fu_244_p4 = {{data_fu_232_p1[30:23]}};

assign zext_ln15_fu_303_p1 = mantissa_fu_294_p4;

assign zext_ln18_fu_310_p1 = $unsigned(sext_ln18_1_fu_307_p1);

assign zext_ln317_fu_258_p1 = xs_exp_fu_244_p4;

endmodule //echo_effect
