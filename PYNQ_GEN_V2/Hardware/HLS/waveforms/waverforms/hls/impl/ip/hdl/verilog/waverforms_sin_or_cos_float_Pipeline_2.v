// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module waverforms_sin_or_cos_float_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result,
        c_1_reload,
        c_reload,
        shift_1_out,
        shift_1_out_ap_vld,
        select_ln291_1_out,
        select_ln291_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [28:0] result;
input  [31:0] c_1_reload;
input  [31:0] c_reload;
output  [31:0] shift_1_out;
output   shift_1_out_ap_vld;
output  [27:0] select_ln291_1_out;
output   select_ln291_1_out_ap_vld;

reg ap_idle;
reg shift_1_out_ap_vld;
reg select_ln291_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] and_ln292_fu_193_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] i_reg_86;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] xor_ln289_fu_187_p2;
wire    ap_loop_init;
reg   [28:0] in_shift_fu_46;
wire   [28:0] in_shift_2_fu_172_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] shift_fu_50;
wire   [31:0] shift_3_fu_119_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] select_ln290_fu_113_p3;
wire   [0:0] tmp_fu_126_p3;
wire   [31:0] sub_ln291_fu_134_p2;
wire   [31:0] zext_ln291_fu_148_p1;
wire   [31:0] select_ln291_fu_140_p3;
wire   [31:0] lshr_ln291_fu_152_p2;
wire   [31:0] shl_ln291_fu_158_p2;
wire   [31:0] select_ln291_1_fu_164_p3;
wire   [0:0] icmp_ln292_fu_181_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_191;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 in_shift_fu_46 = 29'd0;
#0 shift_fu_50 = 32'd0;
#0 ap_done_reg = 1'b0;
end

waverforms_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            i_reg_86 <= 1'd0;
        end else if ((1'b1 == ap_condition_191)) begin
            i_reg_86 <= xor_ln289_fu_187_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            in_shift_fu_46 <= result;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            in_shift_fu_46 <= in_shift_2_fu_172_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_fu_50 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            shift_fu_50 <= shift_3_fu_119_p2;
        end
    end
end

always @ (*) begin
    if (((1'd0 == and_ln292_fu_193_p2) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'd0 == and_ln292_fu_193_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln291_1_out_ap_vld = 1'b1;
    end else begin
        select_ln291_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'd0 == and_ln292_fu_193_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_1_out_ap_vld = 1'b1;
    end else begin
        shift_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln292_fu_193_p2 = (xor_ln289_fu_187_p2 & icmp_ln292_fu_181_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_191 = ((1'd1 == and_ln292_fu_193_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln292_fu_181_p2 = ((select_ln290_fu_113_p3 == 32'd16) ? 1'b1 : 1'b0);

assign in_shift_2_fu_172_p1 = select_ln291_1_fu_164_p3[28:0];

assign lshr_ln291_fu_152_p2 = zext_ln291_fu_148_p1 >> select_ln291_fu_140_p3;

assign select_ln290_fu_113_p3 = ((i_reg_86[0:0] == 1'b1) ? c_1_reload : c_reload);

assign select_ln291_1_fu_164_p3 = ((tmp_fu_126_p3[0:0] == 1'b1) ? lshr_ln291_fu_152_p2 : shl_ln291_fu_158_p2);

assign select_ln291_1_out = select_ln291_1_fu_164_p3[27:0];

assign select_ln291_fu_140_p3 = ((tmp_fu_126_p3[0:0] == 1'b1) ? sub_ln291_fu_134_p2 : select_ln290_fu_113_p3);

assign shift_1_out = (select_ln290_fu_113_p3 + shift_fu_50);

assign shift_3_fu_119_p2 = (select_ln290_fu_113_p3 + shift_fu_50);

assign shl_ln291_fu_158_p2 = zext_ln291_fu_148_p1 << select_ln291_fu_140_p3;

assign sub_ln291_fu_134_p2 = (32'd0 - select_ln290_fu_113_p3);

assign tmp_fu_126_p3 = select_ln290_fu_113_p3[32'd31];

assign xor_ln289_fu_187_p2 = (i_reg_86 ^ 1'd1);

assign zext_ln291_fu_148_p1 = in_shift_fu_46;

endmodule //waverforms_sin_or_cos_float_Pipeline_2
