-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity waverforms_sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of waverforms_sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_100_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_sin_cos_K0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K0_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_sin_cos_K1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K1_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_sin_cos_K2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_sin_cos_K2_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal din_sign_reg_1213 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_fu_343_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_exp_reg_1219 : STD_LOGIC_VECTOR (7 downto 0);
    signal din_sig_fu_353_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal din_sig_reg_1226 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1232 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln379_fu_392_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln379_reg_1243 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_reg_1248 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Mx_bits_fu_427_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_bits_reg_1253 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_reg_1258 : STD_LOGIC_VECTOR (2 downto 0);
    signal Mx_bits_1_fu_447_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_bits_1_reg_1263 : STD_LOGIC_VECTOR (57 downto 0);
    signal icmp_ln271_1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_1_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_fu_548_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_reg_1273 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Ex_1_fu_562_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_1_reg_1278 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_fu_618_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_reg_1283 : STD_LOGIC_VECTOR (21 downto 0);
    signal cos_basis_fu_622_p19 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_trunc_reg_1294 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln271_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln271_reg_1314 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_1320 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_2_fu_889_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_2_reg_1327 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_1_fu_986_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln32_1_reg_1332 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal result_reg_1337 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal out_bits_fu_1027_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_reg_1343 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_1_fu_1046_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_1_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln306_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_reg_1359 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_c_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_c_1_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_c_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_c_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_shift_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_shift_1_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_select_ln291_1_out : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_select_ln291_1_out_ap_vld : STD_LOGIC;
    signal grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal shift_1_loc_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln291_1_loc_fu_228 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln378_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ref_4oPi_table_100_ce0_local : STD_LOGIC;
    signal second_order_float_sin_cos_K0_ce0_local : STD_LOGIC;
    signal second_order_float_sin_cos_K1_ce0_local : STD_LOGIC;
    signal second_order_float_sin_cos_K2_ce0_local : STD_LOGIC;
    signal mul_ln29_fu_319_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln32_fu_323_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal h_fu_327_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal data_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln376_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_fu_369_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_377_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln379_fu_396_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal shl_ln379_fu_399_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal X_fu_415_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal h_fu_327_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal Ex_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_470_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln491_fu_476_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_2_fu_480_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_4_fu_486_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal t_fu_496_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_504_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_514_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln75_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mx_zeros_fu_534_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln504_fu_538_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal shl_ln504_fu_542_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln453_fu_463_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln505_fu_558_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln506_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln506_fu_582_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln506_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln506_1_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln506_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln506_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln506_1_fu_610_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cos_basis_fu_622_p17 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_662_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_710_p33 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_fu_703_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p33 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_710_p35 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_782_p35 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_fu_854_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_1_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln23_fu_899_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln23_fu_896_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln23_fu_899_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln23_fu_899_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal B_squared_fu_905_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln29_fu_319_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln30_fu_952_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln30_fu_952_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_fu_919_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln_fu_938_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln32_fu_968_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln32_1_fu_972_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln3_fu_958_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_fu_976_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln250_fu_982_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal Mx_2_fu_992_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln32_fu_323_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_5_fu_1017_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_1036_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal Ex_3_fu_1068_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln252_fu_1080_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln300_fu_1084_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln300_fu_1090_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_1094_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln306_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln282_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln282_fu_1127_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_1113_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln282_2_fu_1147_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal phitmp_fu_1117_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal results_exp_fu_1139_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_sig_fu_1154_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal results_exp_1_fu_1162_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal results_sig_1_fu_1169_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal t_2_fu_1176_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal h_fu_327_p10 : STD_LOGIC_VECTOR (79 downto 0);
    signal mul_ln29_fu_319_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln30_fu_952_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln32_fu_323_p10 : STD_LOGIC_VECTOR (57 downto 0);
    signal cos_basis_fu_622_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_basis_fu_622_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_basis_fu_622_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_basis_fu_622_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_basis_fu_622_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_basis_fu_622_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_basis_fu_622_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal cos_basis_fu_622_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_710_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_710_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_782_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component waverforms_sin_or_cos_float_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_bits_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_bits : IN STD_LOGIC_VECTOR (31 downto 0);
        c_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_1_out_ap_vld : OUT STD_LOGIC;
        c_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_out_ap_vld : OUT STD_LOGIC );
    end component;


    component waverforms_sin_or_cos_float_Pipeline_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result : IN STD_LOGIC_VECTOR (28 downto 0);
        c_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        c_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        shift_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        shift_1_out_ap_vld : OUT STD_LOGIC;
        select_ln291_1_out : OUT STD_LOGIC_VECTOR (27 downto 0);
        select_ln291_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component waverforms_mul_23s_22ns_45_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (44 downto 0) );
    end component;


    component waverforms_mul_30s_29ns_58_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component waverforms_mul_80s_24ns_80_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;


    component waverforms_sparsemux_17_3_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component waverforms_sparsemux_33_4_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component waverforms_mul_15ns_15ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component waverforms_mul_15ns_15s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component waverforms_sin_or_cos_float_s_ref_4oPi_table_100_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component waverforms_sin_or_cos_float_s_second_order_float_sin_cos_K0_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component waverforms_sin_or_cos_float_s_second_order_float_sin_cos_K1_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component waverforms_sin_or_cos_float_s_second_order_float_sin_cos_K2_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_U : component waverforms_sin_or_cos_float_s_ref_4oPi_table_100_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_address0,
        ce0 => ref_4oPi_table_100_ce0_local,
        q0 => ref_4oPi_table_100_q0);

    second_order_float_sin_cos_K0_U : component waverforms_sin_or_cos_float_s_second_order_float_sin_cos_K0_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K0_address0,
        ce0 => second_order_float_sin_cos_K0_ce0_local,
        q0 => second_order_float_sin_cos_K0_q0);

    second_order_float_sin_cos_K1_U : component waverforms_sin_or_cos_float_s_second_order_float_sin_cos_K1_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K1_address0,
        ce0 => second_order_float_sin_cos_K1_ce0_local,
        q0 => second_order_float_sin_cos_K1_q0);

    second_order_float_sin_cos_K2_U : component waverforms_sin_or_cos_float_s_second_order_float_sin_cos_K2_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_sin_cos_K2_address0,
        ce0 => second_order_float_sin_cos_K2_ce0_local,
        q0 => second_order_float_sin_cos_K2_q0);

    grp_sin_or_cos_float_Pipeline_1_fu_302 : component waverforms_sin_or_cos_float_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start,
        ap_done => grp_sin_or_cos_float_Pipeline_1_fu_302_ap_done,
        ap_idle => grp_sin_or_cos_float_Pipeline_1_fu_302_ap_idle,
        ap_ready => grp_sin_or_cos_float_Pipeline_1_fu_302_ap_ready,
        out_bits_1 => out_bits_1_reg_1348,
        out_bits => out_bits_reg_1343,
        c_1_out => grp_sin_or_cos_float_Pipeline_1_fu_302_c_1_out,
        c_1_out_ap_vld => grp_sin_or_cos_float_Pipeline_1_fu_302_c_1_out_ap_vld,
        c_out => grp_sin_or_cos_float_Pipeline_1_fu_302_c_out,
        c_out_ap_vld => grp_sin_or_cos_float_Pipeline_1_fu_302_c_out_ap_vld);

    grp_sin_or_cos_float_Pipeline_2_fu_310 : component waverforms_sin_or_cos_float_Pipeline_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start,
        ap_done => grp_sin_or_cos_float_Pipeline_2_fu_310_ap_done,
        ap_idle => grp_sin_or_cos_float_Pipeline_2_fu_310_ap_idle,
        ap_ready => grp_sin_or_cos_float_Pipeline_2_fu_310_ap_ready,
        result => result_reg_1337,
        c_1_reload => grp_sin_or_cos_float_Pipeline_1_fu_302_c_1_out,
        c_reload => grp_sin_or_cos_float_Pipeline_1_fu_302_c_out,
        shift_1_out => grp_sin_or_cos_float_Pipeline_2_fu_310_shift_1_out,
        shift_1_out_ap_vld => grp_sin_or_cos_float_Pipeline_2_fu_310_shift_1_out_ap_vld,
        select_ln291_1_out => grp_sin_or_cos_float_Pipeline_2_fu_310_select_ln291_1_out,
        select_ln291_1_out_ap_vld => grp_sin_or_cos_float_Pipeline_2_fu_310_select_ln291_1_out_ap_vld);

    mul_23s_22ns_45_1_1_U10 : component waverforms_mul_23s_22ns_45_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 22,
        dout_WIDTH => 45)
    port map (
        din0 => second_order_float_sin_cos_K1_q0,
        din1 => mul_ln29_fu_319_p1,
        dout => mul_ln29_fu_319_p2);

    mul_30s_29ns_58_1_1_U11 : component waverforms_mul_30s_29ns_58_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 30,
        din1_WIDTH => 29,
        dout_WIDTH => 58)
    port map (
        din0 => add_ln32_1_reg_1332,
        din1 => mul_ln32_fu_323_p1,
        dout => mul_ln32_fu_323_p2);

    mul_80s_24ns_80_1_1_U12 : component waverforms_mul_80s_24ns_80_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 80)
    port map (
        din0 => Med_reg_1248,
        din1 => h_fu_327_p1,
        dout => h_fu_327_p2);

    sparsemux_17_3_1_1_1_U13 : component waverforms_sparsemux_17_3_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 1,
        CASE1 => "001",
        din1_WIDTH => 1,
        CASE2 => "010",
        din2_WIDTH => 1,
        CASE3 => "011",
        din3_WIDTH => 1,
        CASE4 => "100",
        din4_WIDTH => 1,
        CASE5 => "101",
        din5_WIDTH => 1,
        CASE6 => "110",
        din6_WIDTH => 1,
        CASE7 => "111",
        din7_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        def => cos_basis_fu_622_p17,
        sel => k_1_fu_470_p3,
        dout => cos_basis_fu_622_p19);

    sparsemux_33_4_1_1_1_U14 : component waverforms_sparsemux_33_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 1,
        CASE1 => "0001",
        din1_WIDTH => 1,
        CASE2 => "0010",
        din2_WIDTH => 1,
        CASE3 => "0011",
        din3_WIDTH => 1,
        CASE4 => "0100",
        din4_WIDTH => 1,
        CASE5 => "0101",
        din5_WIDTH => 1,
        CASE6 => "0110",
        din6_WIDTH => 1,
        CASE7 => "0111",
        din7_WIDTH => 1,
        CASE8 => "1000",
        din8_WIDTH => 1,
        CASE9 => "1001",
        din9_WIDTH => 1,
        CASE10 => "1010",
        din10_WIDTH => 1,
        CASE11 => "1011",
        din11_WIDTH => 1,
        CASE12 => "1100",
        din12_WIDTH => 1,
        CASE13 => "1101",
        din13_WIDTH => 1,
        CASE14 => "1110",
        din14_WIDTH => 1,
        CASE15 => "1111",
        din15_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        def => tmp_8_fu_710_p33,
        sel => index_fu_703_p3,
        dout => tmp_8_fu_710_p35);

    sparsemux_33_4_1_1_1_U15 : component waverforms_sparsemux_33_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 1,
        CASE1 => "0001",
        din1_WIDTH => 1,
        CASE2 => "0010",
        din2_WIDTH => 1,
        CASE3 => "0011",
        din3_WIDTH => 1,
        CASE4 => "0100",
        din4_WIDTH => 1,
        CASE5 => "0101",
        din5_WIDTH => 1,
        CASE6 => "0110",
        din6_WIDTH => 1,
        CASE7 => "0111",
        din7_WIDTH => 1,
        CASE8 => "1000",
        din8_WIDTH => 1,
        CASE9 => "1001",
        din9_WIDTH => 1,
        CASE10 => "1010",
        din10_WIDTH => 1,
        CASE11 => "1011",
        din11_WIDTH => 1,
        CASE12 => "1100",
        din12_WIDTH => 1,
        CASE13 => "1101",
        din13_WIDTH => 1,
        CASE14 => "1110",
        din14_WIDTH => 1,
        CASE15 => "1111",
        din15_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        def => tmp_9_fu_782_p33,
        sel => index_fu_703_p3,
        dout => tmp_9_fu_782_p35);

    mul_15ns_15ns_30_1_1_U16 : component waverforms_mul_15ns_15ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln23_fu_899_p0,
        din1 => mul_ln23_fu_899_p1,
        dout => mul_ln23_fu_899_p2);

    mul_15ns_15s_30_1_1_U17 : component waverforms_mul_15ns_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln30_fu_952_p0,
        din1 => second_order_float_sin_cos_K2_q0,
        dout => mul_ln30_fu_952_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_Pipeline_1_fu_302_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_Pipeline_2_fu_310_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                B_reg_1283 <= B_fu_618_p1;
                B_trunc_reg_1294 <= select_ln506_1_fu_610_p3(21 downto 7);
                Ex_1_reg_1278 <= Ex_1_fu_562_p2;
                Mx_reg_1273 <= shl_ln504_fu_542_p2(57 downto 29);
                and_ln271_reg_1314 <= and_ln271_fu_867_p2;
                cos_basis_reg_1288 <= cos_basis_fu_622_p19;
                icmp_ln282_reg_1320 <= icmp_ln282_fu_872_p2;
                results_sign_2_reg_1327 <= results_sign_2_fu_889_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Med_reg_1248 <= shl_ln379_fu_399_p2(99 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Mx_bits_1_reg_1263 <= Mx_bits_1_fu_447_p2;
                Mx_bits_reg_1253 <= h_fu_327_p2(76 downto 19);
                icmp_ln271_1_reg_1268 <= icmp_ln271_1_fu_453_p2;
                k_reg_1258 <= h_fu_327_p2(79 downto 77);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln32_1_reg_1332 <= add_ln32_1_fu_986_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                closepath_reg_1232 <= closepath_fu_357_p2;
                din_exp_reg_1219 <= data_fu_331_p1(30 downto 23);
                din_sig_reg_1226 <= din_sig_fu_353_p1;
                din_sign_reg_1213 <= data_fu_331_p1(31 downto 31);
                trunc_ln379_reg_1243 <= trunc_ln379_fu_392_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln306_reg_1359 <= icmp_ln306_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    out_bits_1_reg_1348(31 downto 19) <= out_bits_1_fu_1046_p3(31 downto 19);
                    out_bits_reg_1343(31 downto 16) <= out_bits_fu_1027_p3(31 downto 16);
                result_reg_1337 <= mul_ln32_fu_323_p2(57 downto 29);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_sin_or_cos_float_Pipeline_2_fu_310_select_ln291_1_out_ap_vld = ap_const_logic_1))) then
                select_ln291_1_loc_fu_228 <= grp_sin_or_cos_float_Pipeline_2_fu_310_select_ln291_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_sin_or_cos_float_Pipeline_2_fu_310_shift_1_out_ap_vld = ap_const_logic_1))) then
                shift_1_loc_fu_232 <= grp_sin_or_cos_float_Pipeline_2_fu_310_shift_1_out;
            end if;
        end if;
    end process;
    out_bits_reg_1343(15 downto 0) <= "1000000000000000";
    out_bits_1_reg_1348(18 downto 0) <= "1000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_sin_or_cos_float_Pipeline_1_fu_302_ap_done, grp_sin_or_cos_float_Pipeline_2_fu_310_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_sin_or_cos_float_Pipeline_1_fu_302_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_sin_or_cos_float_Pipeline_2_fu_310_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    A_fu_688_p3 <= (sin_basis_fu_682_p2 & tmp_3_fu_662_p4);
    B_fu_618_p1 <= select_ln506_1_fu_610_p3(22 - 1 downto 0);
    B_squared_fu_905_p4 <= mul_ln23_fu_899_p2(29 downto 15);
    Ex_1_fu_562_p2 <= std_logic_vector(unsigned(select_ln453_fu_463_p3) - unsigned(zext_ln505_fu_558_p1));
    Ex_3_fu_1068_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1288(0) = '1') else 
        Ex_1_reg_1278;
    Ex_fu_458_p2 <= std_logic_vector(unsigned(din_exp_reg_1219) + unsigned(ap_const_lv8_83));
    Mx_2_fu_992_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_reg_1288(0) = '1') else 
        Mx_reg_1273;
    Mx_bits_1_fu_447_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(Mx_bits_fu_427_p4));
    Mx_bits_2_fu_480_p3 <= 
        Mx_bits_1_reg_1263 when (trunc_ln491_fu_476_p1(0) = '1') else 
        Mx_bits_reg_1253;
    Mx_bits_fu_427_p4 <= h_fu_327_p2(76 downto 19);
    Mx_fu_548_p4 <= shl_ln504_fu_542_p2(57 downto 29);
    Mx_zeros_fu_534_p1 <= tmp_2_fu_526_p3(6 - 1 downto 0);
    X_fu_415_p3 <= (ap_const_lv1_1 & din_sig_reg_1226);
    add_ln300_fu_1084_p2 <= std_logic_vector(signed(sext_ln252_fu_1080_p1) + signed(ap_const_lv9_7F));
    add_ln32_1_fu_986_p2 <= std_logic_vector(unsigned(add_ln32_fu_976_p2) + unsigned(sext_ln250_fu_982_p1));
    add_ln32_fu_976_p2 <= std_logic_vector(signed(sext_ln32_fu_968_p1) + signed(sext_ln32_1_fu_972_p1));
    add_ln376_fu_363_p2 <= std_logic_vector(unsigned(din_exp_fu_343_p4) + unsigned(ap_const_lv8_C2));
    addr_fu_369_p3 <= 
        ap_const_lv8_3F when (closepath_fu_357_p2(0) = '1') else 
        add_ln376_fu_363_p2;
    and_ln271_fu_867_p2 <= (icmp_ln271_fu_862_p2 and icmp_ln271_1_reg_1268);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_sin_or_cos_float_Pipeline_1_fu_302_ap_done)
    begin
        if ((grp_sin_or_cos_float_Pipeline_1_fu_302_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_sin_or_cos_float_Pipeline_2_fu_310_ap_done)
    begin
        if ((grp_sin_or_cos_float_Pipeline_2_fu_310_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= t_2_fu_1176_p4;
    closepath_fu_357_p2 <= "1" when (unsigned(din_exp_fu_343_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_622_p17 <= "X";
    data_fu_331_p1 <= t_in;
    din_exp_fu_343_p4 <= data_fu_331_p1(30 downto 23);
    din_sig_fu_353_p1 <= data_fu_331_p1(23 - 1 downto 0);
    empty_fu_1113_p1 <= newexp_fu_1094_p2(8 - 1 downto 0);
    grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start <= grp_sin_or_cos_float_Pipeline_1_fu_302_ap_start_reg;
    grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start <= grp_sin_or_cos_float_Pipeline_2_fu_310_ap_start_reg;
    h_fu_327_p1 <= h_fu_327_p10(24 - 1 downto 0);
    h_fu_327_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_fu_415_p3),80));
    icmp_ln271_1_fu_453_p2 <= "1" when (din_sig_reg_1226 = ap_const_lv23_0) else "0";
    icmp_ln271_fu_862_p2 <= "1" when (din_exp_reg_1219 = ap_const_lv8_0) else "0";
    icmp_ln282_fu_872_p2 <= "1" when (din_exp_reg_1219 = ap_const_lv8_FF) else "0";
    icmp_ln306_fu_1063_p2 <= "1" when (result_reg_1337 = ap_const_lv29_0) else "0";
    index_fu_703_p3 <= (din_sign_reg_1213 & k_1_fu_470_p3);
    k_1_fu_470_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1232(0) = '1') else 
        k_reg_1258;
    lshr_ln506_fu_598_p2 <= std_logic_vector(shift_right(unsigned(zext_ln506_fu_594_p1),to_integer(unsigned('0' & zext_ln506_1_fu_590_p1(31-1 downto 0)))));
    lshr_ln_fu_377_p4 <= addr_fu_369_p3(7 downto 4);
    mul_ln23_fu_899_p0 <= zext_ln23_fu_896_p1(15 - 1 downto 0);
    mul_ln23_fu_899_p1 <= zext_ln23_fu_896_p1(15 - 1 downto 0);
    mul_ln29_fu_319_p1 <= mul_ln29_fu_319_p10(22 - 1 downto 0);
    mul_ln29_fu_319_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_1283),45));
    mul_ln30_fu_952_p0 <= mul_ln30_fu_952_p00(15 - 1 downto 0);
    mul_ln30_fu_952_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_fu_905_p4),30));
    mul_ln32_fu_323_p1 <= mul_ln32_fu_323_p10(29 - 1 downto 0);
    mul_ln32_fu_323_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_2_fu_992_p3),58));
    newexp_fu_1094_p2 <= std_logic_vector(signed(sext_ln300_fu_1090_p1) - signed(shift_1_loc_fu_232));
    or_ln282_fu_1134_p2 <= (or_ln306_fu_1108_p2 or icmp_ln282_reg_1320);
    or_ln306_fu_1108_p2 <= (tmp_7_fu_1100_p3 or icmp_ln306_reg_1359);
    out_bits_1_fu_1046_p3 <= (tmp_6_fu_1036_p4 & ap_const_lv19_40000);
    out_bits_fu_1027_p3 <= (tmp_5_fu_1017_p4 & ap_const_lv16_8000);
    phitmp_fu_1117_p4 <= select_ln291_1_loc_fu_228(27 downto 5);
    ref_4oPi_table_100_address0 <= zext_ln378_fu_387_p1(4 - 1 downto 0);

    ref_4oPi_table_100_ce0_local_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ref_4oPi_table_100_ce0_local <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_1_fu_1162_p3 <= 
        ap_const_lv8_0 when (and_ln271_reg_1314(0) = '1') else 
        results_exp_fu_1139_p3;
    results_exp_fu_1139_p3 <= 
        select_ln282_fu_1127_p3 when (or_ln282_fu_1134_p2(0) = '1') else 
        empty_fu_1113_p1;
    results_sig_1_fu_1169_p3 <= 
        ap_const_lv23_0 when (and_ln271_reg_1314(0) = '1') else 
        results_sig_fu_1154_p3;
    results_sig_fu_1154_p3 <= 
        select_ln282_2_fu_1147_p3 when (or_ln282_fu_1134_p2(0) = '1') else 
        phitmp_fu_1117_p4;
    results_sign_1_fu_883_p2 <= (xor_ln282_fu_877_p2 and results_sign_fu_854_p3);
    results_sign_2_fu_889_p3 <= 
        din_sign_reg_1213 when (and_ln271_fu_867_p2(0) = '1') else 
        results_sign_1_fu_883_p2;
    results_sign_fu_854_p3 <= 
        tmp_8_fu_710_p35 when (cos_basis_fu_622_p19(0) = '1') else 
        tmp_9_fu_782_p35;
    second_order_float_sin_cos_K0_address0 <= zext_ln28_fu_696_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K0_ce0_local_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            second_order_float_sin_cos_K0_ce0_local <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K1_address0 <= zext_ln28_fu_696_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K1_ce0_local_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            second_order_float_sin_cos_K1_ce0_local <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_sin_cos_K2_address0 <= zext_ln28_fu_696_p1(8 - 1 downto 0);

    second_order_float_sin_cos_K2_ce0_local_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            second_order_float_sin_cos_K2_ce0_local <= ap_const_logic_1;
        else 
            second_order_float_sin_cos_K2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln282_2_fu_1147_p3 <= 
        ap_const_lv23_7FFFFF when (icmp_ln282_reg_1320(0) = '1') else 
        ap_const_lv23_0;
    select_ln282_fu_1127_p3 <= 
        ap_const_lv8_FF when (icmp_ln282_reg_1320(0) = '1') else 
        ap_const_lv8_0;
    select_ln453_fu_463_p3 <= 
        Ex_fu_458_p2 when (closepath_reg_1232(0) = '1') else 
        ap_const_lv8_0;
    select_ln506_1_fu_610_p3 <= 
        lshr_ln506_fu_598_p2 when (tmp_fu_568_p3(0) = '1') else 
        shl_ln506_fu_604_p2;
    select_ln506_fu_582_p3 <= 
        sub_ln506_fu_576_p2 when (tmp_fu_568_p3(0) = '1') else 
        Ex_1_fu_562_p2;
        sext_ln250_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_958_p4),30));

        sext_ln252_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_3_fu_1068_p3),9));

        sext_ln300_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln300_fu_1084_p2),32));

        sext_ln32_1_fu_972_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_938_p4),30));

        sext_ln32_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_fu_919_p4),30));

        sext_ln75_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_514_p3),32));

    shl_ln379_fu_399_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_q0),to_integer(unsigned('0' & zext_ln379_fu_396_p1(31-1 downto 0)))));
    shl_ln504_fu_542_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_2_fu_480_p3),to_integer(unsigned('0' & zext_ln504_fu_538_p1(31-1 downto 0)))));
    shl_ln506_fu_604_p2 <= std_logic_vector(shift_left(unsigned(zext_ln506_fu_594_p1),to_integer(unsigned('0' & zext_ln506_1_fu_590_p1(31-1 downto 0)))));
    sin_basis_fu_682_p2 <= (cos_basis_fu_622_p19 xor ap_const_lv1_1);
    sub_ln506_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(Ex_1_fu_562_p2));
    t1_fu_919_p4 <= second_order_float_sin_cos_K0_q0(29 downto 1);
    t_2_fu_1176_p4 <= ((results_sign_2_reg_1327 & results_exp_1_fu_1162_p3) & results_sig_1_fu_1169_p3);
    t_fu_496_p3 <= (tmp_4_fu_486_p4 & ap_const_lv1_1);
    tmp_1_fu_514_p3 <= (ap_const_lv1_1 & tmp_s_fu_504_p4);
    
    tmp_2_fu_526_p3_proc : process(sext_ln75_fu_522_p1)
    begin
        tmp_2_fu_526_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln75_fu_522_p1(i) = '1' then
                tmp_2_fu_526_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    tmp_3_fu_662_p4 <= select_ln506_1_fu_610_p3(28 downto 22);
    tmp_4_fu_486_p4 <= Mx_bits_2_fu_480_p3(57 downto 29);
    tmp_5_fu_1017_p4 <= mul_ln32_fu_323_p2(57 downto 42);
    tmp_6_fu_1036_p4 <= mul_ln32_fu_323_p2(41 downto 29);
    tmp_7_fu_1100_p3 <= newexp_fu_1094_p2(31 downto 31);
    tmp_8_fu_710_p33 <= "X";
    tmp_9_fu_782_p33 <= "X";
    tmp_fu_568_p3 <= Ex_1_fu_562_p2(7 downto 7);
    
    tmp_s_fu_504_p4_proc : process(t_fu_496_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_s_fu_504_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := t_fu_496_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for tmp_s_fu_504_p4_i in 0 to 30-1 loop
                v0_cpy(tmp_s_fu_504_p4_i) := t_fu_496_p3(30-1-tmp_s_fu_504_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_s_fu_504_p4 <= resvalue(30-1 downto 0);
    end process;

    trunc_ln379_fu_392_p1 <= addr_fu_369_p3(4 - 1 downto 0);
    trunc_ln3_fu_958_p4 <= mul_ln30_fu_952_p2(29 downto 16);
    trunc_ln491_fu_476_p1 <= k_1_fu_470_p3(1 - 1 downto 0);
    trunc_ln_fu_938_p4 <= mul_ln29_fu_319_p2(44 downto 23);
    xor_ln282_fu_877_p2 <= (icmp_ln282_fu_872_p2 xor ap_const_lv1_1);
    zext_ln23_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_reg_1294),30));
    zext_ln28_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_fu_688_p3),64));
    zext_ln378_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_377_p4),64));
    zext_ln379_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln379_reg_1243),100));
    zext_ln504_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_fu_534_p1),58));
    zext_ln505_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_fu_534_p1),8));
    zext_ln506_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln506_fu_582_p3),32));
    zext_ln506_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_fu_548_p4),32));
end behav;
