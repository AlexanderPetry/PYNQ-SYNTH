-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity waverforms_generic_asin_float_Pipeline_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_ph : IN STD_LOGIC_VECTOR (54 downto 0);
    tz_0_0_0_08_i_out : OUT STD_LOGIC_VECTOR (54 downto 0);
    tz_0_0_0_08_i_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of waverforms_generic_asin_float_Pipeline_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv55_10000000000000 : STD_LOGIC_VECTOR (54 downto 0) := "0010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln114_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cordic_apfixed_circ_table_arctan_128_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal cordic_apfixed_circ_table_arctan_128_q0 : STD_LOGIC_VECTOR (125 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal d_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_s_fu_234_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal x_s_reg_477 : STD_LOGIC_VECTOR (54 downto 0);
    signal y_s_fu_254_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal y_s_reg_483 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln152_fu_278_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln152_reg_489 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln153_fu_284_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln153_reg_495 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln114_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal conv_i_i_i4582_i_fu_62 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    signal select_ln154_1_fu_364_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_sig_allocacmp_conv_i_i_i4582_i_load : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal conv_i_i_i5225_i_fu_66 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    signal select_ln154_fu_357_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_sig_allocacmp_conv_i_i_i5225_i_load : STD_LOGIC_VECTOR (54 downto 0);
    signal tz_0_0_0_08_i_fu_70 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    signal tz_fu_405_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal n_fu_74 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal n_2_fu_142_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal t_fu_78 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    signal t_4_fu_320_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cordic_apfixed_circ_table_arctan_128_ce0_local : STD_LOGIC;
    signal tmp_fu_166_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln131_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln114_1_fu_162_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln147_fu_186_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln147_fu_200_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_fu_206_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln147_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln147_fu_218_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal shl_ln147_fu_222_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal ashr_ln147_fu_228_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal shl_ln148_fu_242_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal ashr_ln148_fu_248_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal zext_ln149_fu_262_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal x_s2_fu_266_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal y_s2_fu_272_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal shl_ln_fu_290_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln167_fu_304_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal t_s_fu_308_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal icmp_ln166_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_3_fu_314_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal add_ln155_fu_349_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln159_fu_341_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln156_fu_353_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal add_ln160_fu_345_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_1_fu_371_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal z_s_fu_381_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln173_fu_389_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sub_ln176_fu_393_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal add_ln179_fu_399_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component waverforms_generic_asin_float_Pipeline_1_cordic_apfixed_circ_table_arctan_128_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component waverforms_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    cordic_apfixed_circ_table_arctan_128_U : component waverforms_generic_asin_float_Pipeline_1_cordic_apfixed_circ_table_arctan_128_ROM_AUTO_1R
    generic map (
        DataWidth => 126,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_apfixed_circ_table_arctan_128_address0,
        ce0 => cordic_apfixed_circ_table_arctan_128_ce0_local,
        q0 => cordic_apfixed_circ_table_arctan_128_q0);

    flow_control_loop_pipe_sequential_init_U : component waverforms_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    conv_i_i_i4582_i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    conv_i_i_i4582_i_fu_62 <= ap_const_lv55_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    conv_i_i_i4582_i_fu_62 <= select_ln154_1_fu_364_p3;
                end if;
            end if; 
        end if;
    end process;

    conv_i_i_i5225_i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    conv_i_i_i5225_i_fu_66 <= ap_const_lv55_10000000000000;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    conv_i_i_i5225_i_fu_66 <= select_ln154_fu_357_p3;
                end if;
            end if; 
        end if;
    end process;

    n_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_74 <= ap_const_lv6_0;
                elsif (((icmp_ln114_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    n_fu_74 <= n_2_fu_142_p2;
                end if;
            end if; 
        end if;
    end process;

    t_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_78 <= t_ph;
                elsif (((icmp_ln114_fu_136_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t_fu_78 <= t_4_fu_320_p3;
                end if;
            end if; 
        end if;
    end process;

    tz_0_0_0_08_i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    tz_0_0_0_08_i_fu_70 <= ap_const_lv55_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    tz_0_0_0_08_i_fu_70 <= tz_fu_405_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                d_reg_470 <= d_fu_180_p2;
                sub_ln152_reg_489 <= sub_ln152_fu_278_p2;
                sub_ln153_reg_495 <= sub_ln153_fu_284_p2;
                x_s_reg_477 <= x_s_fu_234_p3;
                y_s_reg_483 <= y_s_fu_254_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln147_fu_186_p2 <= std_logic_vector(unsigned(zext_ln114_1_fu_162_p1) + unsigned(ap_const_lv7_7F));
    add_ln155_fu_349_p2 <= std_logic_vector(unsigned(sub_ln152_reg_489) + unsigned(y_s_reg_483));
    add_ln160_fu_345_p2 <= std_logic_vector(unsigned(sub_ln153_reg_495) + unsigned(x_s_reg_477));
    add_ln179_fu_399_p2 <= std_logic_vector(unsigned(zext_ln173_fu_389_p1) + unsigned(tz_0_0_0_08_i_fu_70));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln114_fu_136_p2)
    begin
        if (((icmp_ln114_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i_i4582_i_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, conv_i_i_i4582_i_fu_62, select_ln154_1_fu_364_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_conv_i_i_i4582_i_load <= select_ln154_1_fu_364_p3;
        else 
            ap_sig_allocacmp_conv_i_i_i4582_i_load <= conv_i_i_i4582_i_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i_i5225_i_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, conv_i_i_i5225_i_fu_66, select_ln154_fu_357_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_conv_i_i_i5225_i_load <= select_ln154_fu_357_p3;
        else 
            ap_sig_allocacmp_conv_i_i_i5225_i_load <= conv_i_i_i5225_i_fu_66;
        end if; 
    end process;

    ashr_ln147_fu_228_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_conv_i_i_i5225_i_load),to_integer(unsigned('0' & zext_ln147_fu_218_p1(31-1 downto 0)))));
    ashr_ln148_fu_248_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_conv_i_i_i4582_i_load),to_integer(unsigned('0' & zext_ln147_fu_218_p1(31-1 downto 0)))));
    cordic_apfixed_circ_table_arctan_128_address0 <= zext_ln114_fu_157_p1(7 - 1 downto 0);

    cordic_apfixed_circ_table_arctan_128_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cordic_apfixed_circ_table_arctan_128_ce0_local <= ap_const_logic_1;
        else 
            cordic_apfixed_circ_table_arctan_128_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_180_p2 <= (tmp_fu_166_p3 xor icmp_ln131_fu_174_p2);
    icmp_ln114_fu_136_p2 <= "1" when (n_fu_74 = ap_const_lv6_35) else "0";
    icmp_ln131_fu_174_p2 <= "1" when (signed(ap_sig_allocacmp_conv_i_i_i4582_i_load) > signed(t_fu_78)) else "0";
    icmp_ln166_fu_298_p2 <= "1" when (unsigned(shl_ln_fu_290_p3) < unsigned(ap_const_lv7_37)) else "0";
    n_2_fu_142_p2 <= std_logic_vector(unsigned(n_fu_74) + unsigned(ap_const_lv6_1));
    select_ln147_fu_206_p3 <= 
        sub_ln147_fu_200_p2 when (tmp_8_fu_192_p3(0) = '1') else 
        add_ln147_fu_186_p2;
    select_ln154_1_fu_364_p3 <= 
        sub_ln156_fu_353_p2 when (d_reg_470(0) = '1') else 
        add_ln160_fu_345_p2;
    select_ln154_fu_357_p3 <= 
        add_ln155_fu_349_p2 when (d_reg_470(0) = '1') else 
        sub_ln159_fu_341_p2;
        sext_ln147_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln147_fu_206_p3),32));

    shl_ln147_fu_222_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_conv_i_i_i5225_i_load),to_integer(unsigned('0' & zext_ln147_fu_218_p1(31-1 downto 0)))));
    shl_ln148_fu_242_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_conv_i_i_i4582_i_load),to_integer(unsigned('0' & zext_ln147_fu_218_p1(31-1 downto 0)))));
    shl_ln_fu_290_p3 <= (n_fu_74 & ap_const_lv1_0);
    sub_ln147_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) - unsigned(zext_ln114_1_fu_162_p1));
    sub_ln152_fu_278_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_conv_i_i_i5225_i_load) - unsigned(x_s2_fu_266_p2));
    sub_ln153_fu_284_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_conv_i_i_i4582_i_load) - unsigned(y_s2_fu_272_p2));
    sub_ln156_fu_353_p2 <= std_logic_vector(unsigned(sub_ln153_reg_495) - unsigned(x_s_reg_477));
    sub_ln159_fu_341_p2 <= std_logic_vector(unsigned(sub_ln152_reg_489) - unsigned(y_s_reg_483));
    sub_ln176_fu_393_p2 <= std_logic_vector(unsigned(tz_0_0_0_08_i_fu_70) - unsigned(zext_ln173_fu_389_p1));
    t_3_fu_314_p2 <= std_logic_vector(unsigned(t_s_fu_308_p2) + unsigned(t_fu_78));
    t_4_fu_320_p3 <= 
        t_3_fu_314_p2 when (icmp_ln166_fu_298_p2(0) = '1') else 
        t_fu_78;
    t_s_fu_308_p2 <= std_logic_vector(shift_right(signed(t_fu_78),to_integer(unsigned('0' & zext_ln167_fu_304_p1(31-1 downto 0)))));
    tmp_1_fu_371_p4 <= cordic_apfixed_circ_table_arctan_128_q0(125 downto 74);
    tmp_8_fu_192_p3 <= add_ln147_fu_186_p2(6 downto 6);
    tmp_fu_166_p3 <= ap_sig_allocacmp_conv_i_i_i5225_i_load(54 downto 54);
    tz_0_0_0_08_i_out <= tz_0_0_0_08_i_fu_70;

    tz_0_0_0_08_i_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln114_fu_136_p2, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln114_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tz_0_0_0_08_i_out_ap_vld <= ap_const_logic_1;
        else 
            tz_0_0_0_08_i_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tz_fu_405_p3 <= 
        sub_ln176_fu_393_p2 when (d_reg_470(0) = '1') else 
        add_ln179_fu_399_p2;
    x_s2_fu_266_p2 <= std_logic_vector(shift_right(signed(x_s_fu_234_p3),to_integer(unsigned('0' & zext_ln149_fu_262_p1(31-1 downto 0)))));
    x_s_fu_234_p3 <= 
        shl_ln147_fu_222_p2 when (tmp_8_fu_192_p3(0) = '1') else 
        ashr_ln147_fu_228_p2;
    y_s2_fu_272_p2 <= std_logic_vector(shift_right(signed(y_s_fu_254_p3),to_integer(unsigned('0' & zext_ln149_fu_262_p1(31-1 downto 0)))));
    y_s_fu_254_p3 <= 
        shl_ln148_fu_242_p2 when (tmp_8_fu_192_p3(0) = '1') else 
        ashr_ln148_fu_248_p2;
    z_s_fu_381_p3 <= (tmp_1_fu_371_p4 & ap_const_lv1_0);
    zext_ln114_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_fu_74),7));
    zext_ln114_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_fu_74),64));
    zext_ln147_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln147_fu_214_p1),55));
    zext_ln149_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_2_fu_142_p2),55));
    zext_ln167_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_290_p3),55));
    zext_ln173_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z_s_fu_381_p3),55));
end behav;
