// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="waverforms_waverforms,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.993000,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3717,HLS_SYN_LUT=10931,HLS_VERSION=2024_1}" *)

module waverforms (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 82'd1;
parameter    ap_ST_fsm_state2 = 82'd2;
parameter    ap_ST_fsm_state3 = 82'd4;
parameter    ap_ST_fsm_state4 = 82'd8;
parameter    ap_ST_fsm_state5 = 82'd16;
parameter    ap_ST_fsm_state6 = 82'd32;
parameter    ap_ST_fsm_state7 = 82'd64;
parameter    ap_ST_fsm_state8 = 82'd128;
parameter    ap_ST_fsm_state9 = 82'd256;
parameter    ap_ST_fsm_state10 = 82'd512;
parameter    ap_ST_fsm_state11 = 82'd1024;
parameter    ap_ST_fsm_state12 = 82'd2048;
parameter    ap_ST_fsm_state13 = 82'd4096;
parameter    ap_ST_fsm_state14 = 82'd8192;
parameter    ap_ST_fsm_state15 = 82'd16384;
parameter    ap_ST_fsm_state16 = 82'd32768;
parameter    ap_ST_fsm_state17 = 82'd65536;
parameter    ap_ST_fsm_state18 = 82'd131072;
parameter    ap_ST_fsm_state19 = 82'd262144;
parameter    ap_ST_fsm_state20 = 82'd524288;
parameter    ap_ST_fsm_state21 = 82'd1048576;
parameter    ap_ST_fsm_state22 = 82'd2097152;
parameter    ap_ST_fsm_state23 = 82'd4194304;
parameter    ap_ST_fsm_state24 = 82'd8388608;
parameter    ap_ST_fsm_state25 = 82'd16777216;
parameter    ap_ST_fsm_state26 = 82'd33554432;
parameter    ap_ST_fsm_state27 = 82'd67108864;
parameter    ap_ST_fsm_state28 = 82'd134217728;
parameter    ap_ST_fsm_state29 = 82'd268435456;
parameter    ap_ST_fsm_state30 = 82'd536870912;
parameter    ap_ST_fsm_state31 = 82'd1073741824;
parameter    ap_ST_fsm_state32 = 82'd2147483648;
parameter    ap_ST_fsm_state33 = 82'd4294967296;
parameter    ap_ST_fsm_state34 = 82'd8589934592;
parameter    ap_ST_fsm_state35 = 82'd17179869184;
parameter    ap_ST_fsm_state36 = 82'd34359738368;
parameter    ap_ST_fsm_state37 = 82'd68719476736;
parameter    ap_ST_fsm_state38 = 82'd137438953472;
parameter    ap_ST_fsm_state39 = 82'd274877906944;
parameter    ap_ST_fsm_state40 = 82'd549755813888;
parameter    ap_ST_fsm_state41 = 82'd1099511627776;
parameter    ap_ST_fsm_state42 = 82'd2199023255552;
parameter    ap_ST_fsm_state43 = 82'd4398046511104;
parameter    ap_ST_fsm_state44 = 82'd8796093022208;
parameter    ap_ST_fsm_state45 = 82'd17592186044416;
parameter    ap_ST_fsm_state46 = 82'd35184372088832;
parameter    ap_ST_fsm_state47 = 82'd70368744177664;
parameter    ap_ST_fsm_state48 = 82'd140737488355328;
parameter    ap_ST_fsm_state49 = 82'd281474976710656;
parameter    ap_ST_fsm_state50 = 82'd562949953421312;
parameter    ap_ST_fsm_state51 = 82'd1125899906842624;
parameter    ap_ST_fsm_state52 = 82'd2251799813685248;
parameter    ap_ST_fsm_state53 = 82'd4503599627370496;
parameter    ap_ST_fsm_state54 = 82'd9007199254740992;
parameter    ap_ST_fsm_state55 = 82'd18014398509481984;
parameter    ap_ST_fsm_state56 = 82'd36028797018963968;
parameter    ap_ST_fsm_state57 = 82'd72057594037927936;
parameter    ap_ST_fsm_state58 = 82'd144115188075855872;
parameter    ap_ST_fsm_state59 = 82'd288230376151711744;
parameter    ap_ST_fsm_state60 = 82'd576460752303423488;
parameter    ap_ST_fsm_state61 = 82'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 82'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 82'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 82'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 82'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 82'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 82'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 82'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 82'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 82'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 82'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 82'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 82'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 82'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 82'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 82'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 82'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 82'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 82'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 82'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 82'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 82'd2417851639229258349412352;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [81:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] freq;
wire   [31:0] amplitude;
wire   [31:0] wave_type;
wire   [31:0] sample_rate;
wire   [31:0] phase_in;
wire   [31:0] sample_out;
reg    sample_out_ap_vld;
wire   [31:0] phase_out;
reg    phase_out_ap_vld;
reg  signed [31:0] noise_state;
wire   [31:0] grp_sin_or_cos_float_s_fu_205_ap_return;
reg   [31:0] reg_286;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state43;
wire   [63:0] grp_fu_244_p1;
reg   [63:0] reg_292;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state75;
wire   [63:0] grp_fu_267_p2;
reg   [63:0] reg_300;
wire    ap_CS_fsm_state31;
wire   [63:0] grp_fu_261_p2;
reg   [63:0] reg_306;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state51;
wire   [63:0] grp_fu_255_p2;
reg   [63:0] reg_312;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state79;
reg   [31:0] phase_in_read_reg_463;
reg   [31:0] sample_rate_read_reg_470;
wire   [31:0] wave_type_read_read_fu_142_p2;
reg   [31:0] wave_type_read_reg_475;
reg   [31:0] amplitude_read_reg_480;
reg   [31:0] freq_read_reg_485;
reg   [14:0] trunc_ln1_reg_490;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_237_p1;
reg   [31:0] conv_i_reg_500;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] div_i_reg_505;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_226_p2;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_generic_asin_float_s_fu_218_ap_return;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln38_fu_357_p2;
reg   [0:0] icmp_ln38_reg_520;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln30_fu_381_p2;
reg   [0:0] icmp_ln30_reg_524;
wire   [0:0] icmp_ln30_1_fu_387_p2;
reg   [0:0] icmp_ln30_1_reg_529;
wire   [31:0] sample_1_fu_403_p3;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state46;
wire   [63:0] grp_fu_278_p1;
reg   [63:0] conv1_reg_544;
wire   [31:0] grp_fu_240_p1;
reg   [31:0] phase_reg_549;
wire    ap_CS_fsm_state74;
wire   [0:0] and_ln40_fu_447_p2;
reg   [0:0] and_ln40_reg_555;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state81;
wire    grp_sin_or_cos_float_s_fu_205_ap_start;
wire    grp_sin_or_cos_float_s_fu_205_ap_done;
wire    grp_sin_or_cos_float_s_fu_205_ap_idle;
wire    grp_sin_or_cos_float_s_fu_205_ap_ready;
wire    grp_generic_asin_float_s_fu_218_ap_start;
wire    grp_generic_asin_float_s_fu_218_ap_done;
wire    grp_generic_asin_float_s_fu_218_ap_idle;
wire    grp_generic_asin_float_s_fu_218_ap_ready;
wire   [31:0] grp_generic_asin_float_s_fu_218_grp_fu_244_p_din0;
wire    grp_generic_asin_float_s_fu_218_grp_fu_244_p_ce;
reg   [31:0] sample_5_reg_174;
reg   [31:0] phase_1_reg_194;
reg    grp_sin_or_cos_float_s_fu_205_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state45;
reg    grp_generic_asin_float_s_fu_218_ap_start_reg;
wire   [31:0] add_ln9_fu_322_p2;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state7;
reg   [31:0] grp_fu_231_p0;
reg   [31:0] grp_fu_231_p1;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_237_p0;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state80;
reg   [31:0] grp_fu_244_p0;
wire    ap_CS_fsm_state67;
reg   [63:0] grp_fu_255_p0;
reg   [63:0] grp_fu_255_p1;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state69;
reg   [63:0] grp_fu_261_p0;
reg   [63:0] grp_fu_261_p1;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state48;
reg   [63:0] grp_fu_267_p0;
reg   [63:0] grp_fu_267_p1;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state49;
wire   [31:0] mul_ln9_fu_281_p2;
wire   [29:0] tmp_5_fu_348_p4;
wire   [31:0] bitcast_ln30_fu_363_p1;
wire   [7:0] tmp_1_fu_367_p4;
wire   [22:0] trunc_ln30_fu_377_p1;
wire   [0:0] or_ln30_fu_393_p2;
wire   [0:0] grp_fu_249_p2;
wire   [0:0] and_ln30_fu_397_p2;
wire   [63:0] bitcast_ln40_fu_411_p1;
wire   [10:0] tmp_3_fu_415_p4;
wire   [51:0] trunc_ln40_fu_425_p1;
wire   [0:0] icmp_ln40_1_fu_435_p2;
wire   [0:0] icmp_ln40_fu_429_p2;
wire   [0:0] or_ln40_fu_441_p2;
wire   [0:0] grp_fu_272_p2;
reg    grp_fu_244_ce;
reg    grp_fu_249_ce;
reg   [81:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
reg    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 82'd1;
#0 noise_state = 32'd123456789;
#0 grp_sin_or_cos_float_s_fu_205_ap_start_reg = 1'b0;
#0 grp_generic_asin_float_s_fu_218_ap_start_reg = 1'b0;
end

waverforms_sin_or_cos_float_s grp_sin_or_cos_float_s_fu_205(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sin_or_cos_float_s_fu_205_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_205_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_205_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_205_ap_ready),
    .t_in(phase_in_read_reg_463),
    .ap_return(grp_sin_or_cos_float_s_fu_205_ap_return)
);

waverforms_generic_asin_float_s grp_generic_asin_float_s_fu_218(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_generic_asin_float_s_fu_218_ap_start),
    .ap_done(grp_generic_asin_float_s_fu_218_ap_done),
    .ap_idle(grp_generic_asin_float_s_fu_218_ap_idle),
    .ap_ready(grp_generic_asin_float_s_fu_218_ap_ready),
    .in_r(reg_286),
    .ap_return(grp_generic_asin_float_s_fu_218_ap_return),
    .grp_fu_244_p_din0(grp_generic_asin_float_s_fu_218_grp_fu_244_p_din0),
    .grp_fu_244_p_dout0(grp_fu_244_p1),
    .grp_fu_244_p_ce(grp_generic_asin_float_s_fu_218_grp_fu_244_p_ce)
);

waverforms_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .freq(freq),
    .amplitude(amplitude),
    .wave_type(wave_type),
    .sample_rate(sample_rate),
    .phase_in(phase_in),
    .sample_out(sample_out),
    .sample_out_ap_vld(sample_out_ap_vld),
    .phase_out(phase_out),
    .phase_out_ap_vld(phase_out_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

waverforms_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(div_i_reg_505),
    .din1(32'd3212836864),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

waverforms_fmul_32ns_32ns_32_2_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_2_max_dsp_1_U39(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_231_p0),
    .din1(grp_fu_231_p1),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

waverforms_uitofp_32ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
uitofp_32ns_32_2_no_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_237_p0),
    .ce(1'b1),
    .dout(grp_fu_237_p1)
);

waverforms_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_312),
    .ce(1'b1),
    .dout(grp_fu_240_p1)
);

waverforms_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U42(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_244_p0),
    .ce(grp_fu_244_ce),
    .dout(grp_fu_244_p1)
);

waverforms_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U43(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_sin_or_cos_float_s_fu_205_ap_return),
    .din1(32'd0),
    .ce(grp_fu_249_ce),
    .opcode(5'd3),
    .dout(grp_fu_249_p2)
);

waverforms_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_4_full_dsp_1_U44(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_255_p0),
    .din1(grp_fu_255_p1),
    .ce(1'b1),
    .dout(grp_fu_255_p2)
);

waverforms_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U45(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_261_p0),
    .din1(grp_fu_261_p1),
    .ce(1'b1),
    .dout(grp_fu_261_p2)
);

waverforms_ddiv_64ns_64ns_64_17_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_17_no_dsp_1_U46(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

waverforms_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U47(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_244_p1),
    .din1(64'd4618760256179416344),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_272_p2)
);

waverforms_sitodp_32ns_64_3_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_3_no_dsp_1_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sample_rate_read_reg_470),
    .ce(1'b1),
    .dout(grp_fu_278_p1)
);

waverforms_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U49(
    .din0(noise_state),
    .din1(32'd1103515245),
    .dout(mul_ln9_fu_281_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_generic_asin_float_s_fu_218_ap_start_reg <= 1'b0;
    end else begin
        if (((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            grp_generic_asin_float_s_fu_218_ap_start_reg <= 1'b1;
        end else if ((grp_generic_asin_float_s_fu_218_ap_ready == 1'b1)) begin
            grp_generic_asin_float_s_fu_218_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sin_or_cos_float_s_fu_205_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state11))) begin
            grp_sin_or_cos_float_s_fu_205_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_205_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_205_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln40_fu_447_p2) & (1'b1 == ap_CS_fsm_state76))) begin
        phase_1_reg_194 <= phase_reg_549;
    end else if (((icmp_ln38_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        phase_1_reg_194 <= phase_in_read_reg_463;
    end else if (((1'd1 == and_ln40_reg_555) & (icmp_ln38_reg_520 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        phase_1_reg_194 <= grp_fu_240_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(wave_type_read_read_fu_142_p2 == 32'd4) & ~(wave_type_read_read_fu_142_p2 == 32'd3) & ~(wave_type_read_read_fu_142_p2 == 32'd2) & ~(wave_type_read_read_fu_142_p2 == 32'd1) & ~(wave_type_read_read_fu_142_p2 == 32'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sample_5_reg_174 <= 32'd0;
    end else if (((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        sample_5_reg_174 <= grp_sin_or_cos_float_s_fu_205_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        sample_5_reg_174 <= sample_1_fu_403_p3;
    end else if (((1'b1 == ap_CS_fsm_state41) & (wave_type_read_reg_475 == 32'd2))) begin
        sample_5_reg_174 <= grp_fu_240_p1;
    end else if (((grp_generic_asin_float_s_fu_218_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        sample_5_reg_174 <= grp_generic_asin_float_s_fu_218_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sample_5_reg_174 <= grp_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        amplitude_read_reg_480 <= amplitude;
        freq_read_reg_485 <= freq;
        phase_in_read_reg_463 <= phase_in;
        sample_rate_read_reg_470 <= sample_rate;
        wave_type_read_reg_475 <= wave_type;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        and_ln40_reg_555 <= and_ln40_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        conv1_reg_544 <= grp_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_i_reg_500 <= grp_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        div_i_reg_505 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        icmp_ln30_1_reg_529 <= icmp_ln30_1_fu_387_p2;
        icmp_ln30_reg_524 <= icmp_ln30_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        icmp_ln38_reg_520 <= icmp_ln38_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        noise_state <= add_ln9_fu_322_p2;
        trunc_ln1_reg_490 <= {{add_ln9_fu_322_p2[30:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        phase_reg_549 <= grp_fu_240_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_286 <= grp_sin_or_cos_float_s_fu_205_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_292 <= grp_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state68))) begin
        reg_300 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_306 <= grp_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state39))) begin
        reg_312 <= grp_fu_255_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_generic_asin_float_s_fu_218_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

always @ (*) begin
    if ((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b0)) begin
        ap_ST_fsm_state46_blk = 1'b1;
    end else begin
        ap_ST_fsm_state46_blk = 1'b0;
    end
end

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_231_p0 = sample_5_reg_174;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_231_p0 = conv_i_reg_500;
    end else begin
        grp_fu_231_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        grp_fu_231_p1 = amplitude_read_reg_480;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_231_p1 = 32'd947912704;
    end else begin
        grp_fu_231_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_244_ce = grp_generic_asin_float_s_fu_218_grp_fu_244_p_ce;
    end else begin
        grp_fu_244_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_244_p0 = grp_generic_asin_float_s_fu_218_grp_fu_244_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_244_p0 = grp_fu_240_p1;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_244_p0 = phase_in_read_reg_463;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_fu_244_p0 = freq_read_reg_485;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_244_p0 = phase_in;
    end else begin
        grp_fu_244_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) | ((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43)))) begin
        grp_fu_249_ce = 1'b1;
    end else begin
        grp_fu_249_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state76))) begin
        grp_fu_255_p0 = reg_292;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_255_p0 = reg_306;
    end else begin
        grp_fu_255_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        grp_fu_255_p1 = 64'd13842132293034192152;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_255_p1 = reg_300;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_255_p1 = 64'd13830554455654793216;
    end else begin
        grp_fu_255_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_261_p0 = reg_292;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_261_p0 = reg_300;
    end else begin
        grp_fu_261_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_261_p1 = 64'd4618760256179416344;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_fu_261_p1 = 64'd4611686018427387904;
    end else begin
        grp_fu_261_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_267_p0 = reg_306;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_267_p0 = reg_292;
    end else begin
        grp_fu_267_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_267_p1 = conv1_reg_544;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_267_p1 = 64'd4618760256179416344;
    end else begin
        grp_fu_267_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        phase_out_ap_vld = 1'b1;
    end else begin
        phase_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        sample_out_ap_vld = 1'b1;
    end else begin
        sample_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (wave_type_read_read_fu_142_p2 == 32'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (wave_type_read_read_fu_142_p2 == 32'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else if ((~(wave_type_read_read_fu_142_p2 == 32'd4) & ~(wave_type_read_read_fu_142_p2 == 32'd3) & ~(wave_type_read_read_fu_142_p2 == 32'd2) & ~(wave_type_read_read_fu_142_p2 == 32'd1) & ~(wave_type_read_read_fu_142_p2 == 32'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (wave_type_read_read_fu_142_p2 == 32'd2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (wave_type_read_read_fu_142_p2 == 32'd3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (wave_type_read_read_fu_142_p2 == 32'd4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((grp_generic_asin_float_s_fu_218_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln38_fu_357_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((grp_sin_or_cos_float_s_fu_205_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((1'd0 == and_ln40_fu_447_p2) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln9_fu_322_p2 = (mul_ln9_fu_281_p2 + 32'd12345);

assign and_ln30_fu_397_p2 = (or_ln30_fu_393_p2 & grp_fu_249_p2);

assign and_ln40_fu_447_p2 = (or_ln40_fu_441_p2 & grp_fu_272_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln30_fu_363_p1 = grp_sin_or_cos_float_s_fu_205_ap_return;

assign bitcast_ln40_fu_411_p1 = reg_292;

assign grp_fu_237_p0 = trunc_ln1_reg_490;

assign grp_generic_asin_float_s_fu_218_ap_start = grp_generic_asin_float_s_fu_218_ap_start_reg;

assign grp_sin_or_cos_float_s_fu_205_ap_start = grp_sin_or_cos_float_s_fu_205_ap_start_reg;

assign icmp_ln30_1_fu_387_p2 = ((trunc_ln30_fu_377_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_381_p2 = ((tmp_1_fu_367_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_357_p2 = (($signed(tmp_5_fu_348_p4) < $signed(30'd1)) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_435_p2 = ((trunc_ln40_fu_425_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_429_p2 = ((tmp_3_fu_415_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln30_fu_393_p2 = (icmp_ln30_reg_524 | icmp_ln30_1_reg_529);

assign or_ln40_fu_441_p2 = (icmp_ln40_fu_429_p2 | icmp_ln40_1_fu_435_p2);

assign phase_out = phase_1_reg_194;

assign sample_1_fu_403_p3 = ((and_ln30_fu_397_p2[0:0] == 1'b1) ? 32'd1065353216 : 32'd3212836864);

assign sample_out = grp_fu_231_p2;

assign tmp_1_fu_367_p4 = {{bitcast_ln30_fu_363_p1[30:23]}};

assign tmp_3_fu_415_p4 = {{bitcast_ln40_fu_411_p1[62:52]}};

assign tmp_5_fu_348_p4 = {{wave_type_read_reg_475[31:2]}};

assign trunc_ln30_fu_377_p1 = bitcast_ln30_fu_363_p1[22:0];

assign trunc_ln40_fu_425_p1 = bitcast_ln40_fu_411_p1[51:0];

assign wave_type_read_read_fu_142_p2 = wave_type;

endmodule //waverforms
