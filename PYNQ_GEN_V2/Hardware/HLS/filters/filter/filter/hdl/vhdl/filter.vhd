-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filter_filter,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.637000,HLS_SYN_LAT=30,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=575,HLS_SYN_LUT=1353,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal sample_in : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_out : STD_LOGIC_VECTOR (31 downto 0);
    signal sample_out_ap_vld : STD_LOGIC;
    signal filter_type : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_r_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_r_ce0 : STD_LOGIC;
    signal buffer_r_we0 : STD_LOGIC;
    signal buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal index : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal filter_type_read_reg_221 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln35_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln35_1_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_1_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_done : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_idle : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_ready : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_ce0 : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_we0 : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_done : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_idle : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_ready : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_acc_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_acc_out_ap_vld : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_ce0 : STD_LOGIC;
    signal grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln50_fu_181_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal buffer_r_we0_local : STD_LOGIC;
    signal buffer_r_ce0_local : STD_LOGIC;
    signal sext_ln50_fu_127_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln50_fu_127_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln50_fu_131_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln50_1_fu_149_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln50_1_fu_149_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln50_fu_153_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t_fu_159_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln50_fu_145_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_137_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln50_fu_167_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_173_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter_filter_Pipeline_VITIS_LOOP_29_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_filter_Pipeline_VITIS_LOOP_44_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        icmp_ln35 : IN STD_LOGIC_VECTOR (0 downto 0);
        icmp_ln35_1 : IN STD_LOGIC_VECTOR (0 downto 0);
        acc_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        acc_out_ap_vld : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_buffer_r_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component filter_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        sample_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        sample_out : IN STD_LOGIC_VECTOR (31 downto 0);
        sample_out_ap_vld : IN STD_LOGIC;
        filter_type : OUT STD_LOGIC_VECTOR (1 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    buffer_r_U : component filter_buffer_r_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_r_address0,
        ce0 => buffer_r_ce0,
        we0 => buffer_r_we0,
        d0 => buffer_r_d0,
        q0 => buffer_r_q0);

    grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108 : component filter_filter_Pipeline_VITIS_LOOP_29_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start,
        ap_done => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_done,
        ap_idle => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_idle,
        ap_ready => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_ready,
        buffer_r_address0 => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_address0,
        buffer_r_ce0 => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_ce0,
        buffer_r_we0 => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_we0,
        buffer_r_d0 => grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_d0,
        buffer_r_q0 => buffer_r_q0);

    grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114 : component filter_filter_Pipeline_VITIS_LOOP_44_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start,
        ap_done => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_done,
        ap_idle => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_idle,
        ap_ready => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_ready,
        icmp_ln35 => icmp_ln35_reg_227,
        icmp_ln35_1 => icmp_ln35_1_reg_232,
        acc_out => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_acc_out,
        acc_out_ap_vld => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_acc_out_ap_vld,
        buffer_r_address0 => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_address0,
        buffer_r_ce0 => grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_ce0,
        buffer_r_q0 => buffer_r_q0);

    control_s_axi_U : component filter_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        sample_in => sample_in,
        sample_out => sample_out,
        sample_out_ap_vld => sample_out_ap_vld,
        filter_type => filter_type,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_ready = ap_const_logic_1)) then 
                    grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_ready = ap_const_logic_1)) then 
                    grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                filter_type_read_reg_221 <= filter_type;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln35_1_reg_232 <= icmp_ln35_1_fu_201_p2;
                icmp_ln35_reg_227 <= icmp_ln35_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                index <= select_ln50_fu_181_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_done, grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln50_fu_131_p2 <= std_logic_vector(signed(sext_ln50_fu_127_p1) + signed(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_done)
    begin
        if ((grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_done)
    begin
        if ((grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buffer_r_address0_assign_proc : process(grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_address0, grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_r_address0 <= grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_address0 <= grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_address0;
        else 
            buffer_r_address0 <= ap_const_lv2_0;
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_ce0, grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5, buffer_r_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buffer_r_ce0 <= grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_ce0 <= grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_ce0;
        else 
            buffer_r_ce0 <= buffer_r_ce0_local;
        end if; 
    end process;


    buffer_r_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_ce0_local <= ap_const_logic_1;
        else 
            buffer_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_d0_assign_proc : process(sample_in, grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_d0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_d0 <= grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_d0;
        else 
            buffer_r_d0 <= sample_in;
        end if; 
    end process;


    buffer_r_we0_assign_proc : process(grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_we0, ap_CS_fsm_state2, buffer_r_we0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buffer_r_we0 <= grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_buffer_r_we0;
        else 
            buffer_r_we0 <= buffer_r_we0_local;
        end if; 
    end process;


    buffer_r_we0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_we0_local <= ap_const_logic_1;
        else 
            buffer_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start <= grp_filter_Pipeline_VITIS_LOOP_29_1_fu_108_ap_start_reg;
    grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start <= grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_ap_start_reg;
    icmp_ln35_1_fu_201_p2 <= "1" when (filter_type_read_reg_221 = ap_const_lv2_0) else "0";
    icmp_ln35_fu_195_p2 <= "1" when (filter_type_read_reg_221 = ap_const_lv2_1) else "0";
    p_and_t_fu_159_p3 <= (ap_const_lv1_0 & xor_ln50_fu_153_p2);
    sample_out <= grp_filter_Pipeline_VITIS_LOOP_44_2_fu_114_acc_out;

    sample_out_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sample_out_ap_vld <= ap_const_logic_1;
        else 
            sample_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln50_fu_181_p3 <= 
        sub_ln50_fu_167_p2 when (tmp_fu_137_p3(0) = '1') else 
        tmp_6_fu_173_p3;
    sext_ln50_fu_127_p0 <= index;
        sext_ln50_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_fu_127_p0),4));

    sub_ln50_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(p_and_t_fu_159_p3));
    tmp_6_fu_173_p3 <= (ap_const_lv1_0 & trunc_ln50_fu_145_p1);
    tmp_fu_137_p3 <= add_ln50_fu_131_p2(3 downto 3);
    trunc_ln50_1_fu_149_p0 <= index;
    trunc_ln50_1_fu_149_p1 <= trunc_ln50_1_fu_149_p0(2 - 1 downto 0);
    trunc_ln50_fu_145_p1 <= add_ln50_fu_131_p2(2 - 1 downto 0);
    xor_ln50_fu_153_p2 <= (trunc_ln50_1_fu_149_p1 xor ap_const_lv2_3);
end behav;
